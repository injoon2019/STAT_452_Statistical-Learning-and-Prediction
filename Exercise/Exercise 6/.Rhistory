set.seed(2928893)
### First we need to set the number of folds
K = 10
### Construct folds
### Don't attach fold labels to dataset because we would just have
### to remove this later
n = nrow(data)
n.fold = n/K # Approximate number of observations per fold
n.fold = ceiling(n.fold)
ordered.ids = rep(1:10, each = n.fold)
ordered.ids = ordered.ids[1:n]
fold.ids = shuffle(ordered.ids)
CV.models = c("subsets.AIC", "subsets.BIC",
"stepwise.AIC", "stepwise.BIC")
errs.CV = array(0, dim = c(K,length(CV.models)))
colnames(errs.CV) = CV.models
set.seed(2928893)
### First we need to set the number of folds
K = 10
### Construct folds
### Don't attach fold labels to dataset because we would just have
### to remove this later
n = nrow(data)
n.fold = n/K # Approximate number of observations per fold
n.fold = ceiling(n.fold)
ordered.ids = rep(1:10, each = n.fold)
ordered.ids = ordered.ids[1:n]
fold.ids = shuffle(ordered.ids)
### Create a container to store CV MSPEs
### One column per model, and one row per fold
CV.models = c("subsets.AIC", "subsets.BIC",
"stepwise.AIC", "stepwise.BIC")
errs.CV = array(0, dim = c(K,length(CV.models)))
colnames(errs.CV) = CV.models
### Perform cross-validation to estimate MSPE for each model
### It takes a few seconds to do all-subsets at each iteration, so
### the entire loop will take some time. I like to print out a
### status update at the start of each iteration. The paste0()
### function attaches all of its inputs into a single string.
for(i in 1:K){
print(paste0(i, " of ", K))
### Construct training and validation sets by either removing
### or extracting the current fold.
### Also, get the response vectors
data.train = data[fold.ids != i,]
data.valid = data[fold.ids == i,]
Y.train = data.train$Ozone
Y.valid = data.train$Ozone
##########################################
### Stepwise selection via AIC and BIC ###
##########################################
fit.start = lm(Ozone ~ 1, data = data.train)
fit.end = lm(Ozone ~ .^2, data = data.train)
### These functions will run several times each. We don't need
### to print out all the details, so set trace = 0.
step.AIC = step(fit.start, list(upper = fit.end), k=2,
trace = 0)
step.BIC = step(fit.start, list(upper = fit.end), k = log(n.train),
trace = 0)
pred.step.AIC = predict(step.AIC, data.valid)
pred.step.BIC = predict(step.BIC, data.valid)
err.step.AIC = get.MSPE(Y.valid, pred.step.AIC)
err.step.BIC = get.MSPE(Y.valid, pred.step.BIC)
### Store errors in errs.CV, which has two dimensions, so
### we need two indices
errs.CV[i, "stepwise.AIC"] = err.step.AIC
errs.CV[i, "stepwise.BIC"] = err.step.BIC
}
boxplot(errs.CV, main = "CV Error Estimates")
set.seed(2928893)
### First we need to set the number of folds
K = 10
### Construct folds
### Don't attach fold labels to dataset because we would just have
### to remove this later
n = nrow(data)
n.fold = n/K # Approximate number of observations per fold
n.fold = ceiling(n.fold)
ordered.ids = rep(1:10, each = n.fold)
ordered.ids = ordered.ids[1:n]
fold.ids = shuffle(ordered.ids)
### Create a container to store CV MSPEs
### One column per model, and one row per fold
CV.models = c("stepwise.AIC", "stepwise.BIC")
errs.CV = array(0, dim = c(K,length(CV.models)))
colnames(errs.CV) = CV.models
### Perform cross-validation to estimate MSPE for each model
### It takes a few seconds to do all-subsets at each iteration, so
### the entire loop will take some time. I like to print out a
### status update at the start of each iteration. The paste0()
### function attaches all of its inputs into a single string.
for(i in 1:K){
print(paste0(i, " of ", K))
### Construct training and validation sets by either removing
### or extracting the current fold.
### Also, get the response vectors
data.train = data[fold.ids != i,]
data.valid = data[fold.ids == i,]
Y.train = data.train$Ozone
Y.valid = data.train$Ozone
##########################################
### Stepwise selection via AIC and BIC ###
##########################################
fit.start = lm(Ozone ~ 1, data = data.train)
fit.end = lm(Ozone ~ .^2, data = data.train)
### These functions will run several times each. We don't need
### to print out all the details, so set trace = 0.
step.AIC = step(fit.start, list(upper = fit.end), k=2,
trace = 0)
step.BIC = step(fit.start, list(upper = fit.end), k = log(n.train),
trace = 0)
pred.step.AIC = predict(step.AIC, data.valid)
pred.step.BIC = predict(step.BIC, data.valid)
err.step.AIC = get.MSPE(Y.valid, pred.step.AIC)
err.step.BIC = get.MSPE(Y.valid, pred.step.BIC)
### Store errors in errs.CV, which has two dimensions, so
### we need two indices
errs.CV[i, "stepwise.AIC"] = err.step.AIC
errs.CV[i, "stepwise.BIC"] = err.step.BIC
}
### Now that we have multiple estimates of the models' MSPEs, let's
### make a boxplot
boxplot(errs.CV, main = "CV Error Estimates")
for(i in 1:K){
print(paste0(i, " of ", K))
### Construct training and validation sets by either removing
### or extracting the current fold.
### Also, get the response vectors
data.train = data[fold.ids != i,]
data.valid = data[fold.ids == i,]
Y.train = data.train$Ozone
Y.valid = data.train$Ozone
##########################################
### Stepwise selection via AIC and BIC ###
##########################################
fit.start = lm(Ozone ~ 1, data = data.train)
fit.end = lm(Ozone ~ .^2, data = data.train)
### These functions will run several times each. We don't need
### to print out all the details, so set trace = 0.
step.AIC = step(fit.start, list(upper = fit.end), k=2,
trace = 0)
step.BIC = step(fit.start, list(upper = fit.end), k = log(n.train),
trace = 0)
print(summary(step.BIC))
pred.step.AIC = predict(step.AIC, data.valid)
pred.step.BIC = predict(step.BIC, data.valid)
err.step.AIC = get.MSPE(Y.valid, pred.step.AIC)
err.step.BIC = get.MSPE(Y.valid, pred.step.BIC)
### Store errors in errs.CV, which has two dimensions, so
### we need two indices
errs.CV[i, "stepwise.AIC"] = err.step.AIC
errs.CV[i, "stepwise.BIC"] = err.step.BIC
}
errs.CV
for(i in 1:K){
print(paste0(i, " of ", K))
### Construct training and validation sets by either removing
### or extracting the current fold.
### Also, get the response vectors
data.train = data[fold.ids != i,]
data.valid = data[fold.ids == i,]
Y.train = data.train$Ozone
Y.valid = data.train$Ozone
##########################################
### Stepwise selection via AIC and BIC ###
##########################################
fit.start = lm(Ozone ~ 1, data = data.train)
fit.end = lm(Ozone ~ .^2, data = data.train)
### These functions will run several times each. We don't need
### to print out all the details, so set trace = 0.
step.AIC = step(fit.start, list(upper = fit.end), k=2,
trace = 0)
step.BIC = step(fit.start, list(upper = fit.end), k = log(n.train),
trace = 0)
print(summary(step.BIC))
pred.step.AIC = predict(step.AIC, data.valid)
pred.step.BIC = predict(step.BIC, data.valid)
err.step.AIC = get.MSPE(Y.valid, pred.step.AIC)
err.step.BIC = get.MSPE(Y.valid, pred.step.BIC)
print(paste0(i, "th model error ", err.step.BIC))
### Store errors in errs.CV, which has two dimensions, so
### we need two indices
errs.CV[i, "stepwise.AIC"] = err.step.AIC
errs.CV[i, "stepwise.BIC"] = err.step.BIC
}
pred.step.BIC
summary(pred.step.BIC)
summary(step.BIC)
step.BIC
errs.CV
### First, load the packages we will need
library(dplyr)
library(rgl)
### Run a new script for reading the data
source("Read Wine Data.R")
### First, load the packages we will need
library(dplyr)
library(rgl)
### Run a new script for reading the data
source("Read Wine Data.R")
setwd("C:/Users/injoo/OneDrive/Desktop/SFU/STAT 452/Tutorial/Lecture8_9")
### Run a new script for reading the data
source("Read Wine Data.R")
### Choose breakpoints and construct regions. We use the cut() function
### to construct a categorical variable based on regions for a numeric
### variable.
breaks = c(0, 0.99, 0.993, 0.996, 0.999, 1.1)
regions = cut(data$density, breaks)
data.regions = data.frame(density = data$density, region = regions)
head(data.regions)
### Plot relationship between density and alcohol
with(data, plot(density, alcohol))
### Add breakpoints
abline(v = breaks[2:5], lty = 2)
### Fit a piecewise constant model with our breakpoints
data.breaks = data.frame(alcohol = data$alcohol, Region = regions)
fit.piece = lm(alcohol ~ Region, data = data.breaks)
### Get the predicted value for each region
region.levels = unique(regions)
regions.sorted = sort(region.levels)
data.pred = data.frame(Region = regions.sorted)
fitted.vals = predict(fit.piece, data.pred)
### Add predicted values to the plot
for(i in 1:length(fitted.vals)){
a = breaks[i]
b = breaks[i+1]
preds = rep(fitted.vals[i], times = 2)
lines(c(a,b), preds, col = "red")
}
### Let's just use two levels for each predictor. This will give us
### four separate groups. It probably makes sense to split at the median.
### First, we'll need to get the medians for these two predictors
density.med = median(data$density)
sulphates.med = median(data$sulphates)
### Construct indicators for each variable, checking whether a point is
### above or below the median
density.split.med = with(data, density >= density.med)
sulphates.split.med = with(data, sulphates >= sulphates.med)
### Put the response and the indicators in a data frame for our analysis.
### Let's also include the original variable values for reference
data.split.med = data.frame(alcohol = data$alcohol, density = data$density,
sulphates = data$sulphates, dens.split = density.split.med,
sulp.split = sulphates.split.med)
### Fit a regression model to predict alcohol using step
### functions based on density and sulphates
fit.step.2 = lm(alcohol ~ dens.split + sulp.split, data = data.split.med)
### Plot both predictors, along with alcohol
with(data, plot3d(alcohol ~ density + sulphates))
### Construct a grid of values for the two explanatories
vals.density = seq(from = 0.9870, to = 1.002, by = 0.0002)
vals.sulphates = seq(from = 0.26, to = 1.14, by = 0.01)
vals.grid = expand.grid(density = vals.density, sulphates = vals.sulphates)
### Convert this grid of values to a grid of indicators
### The transmute function lets us define new variables, and drops all
### the variables we started with.
split.grid = transmute(vals.grid, dens.split = density >= density.med,
sulp.split = sulphates >= sulphates.med)
### Get predicted values on the grid of indicators
pred.step.2 = predict(fit.step.2, split.grid)
### Plot predicted values and points
persp3d(x = vals.density, y = vals.sulphates, z = pred.step.2,
xlab = "density", ylab = "sulphates", zlab = "Body Fat %", col = "orange")
setwd("C:/Users/injoo/OneDrive/Desktop/SFU/STAT 452/Exercise/Exercise 6")
library(dplyr)
library(MASS)   # For ridge regression
library(glmnet) # For LASSO
source("Helper Functions.R")
data = na.omit(airquality[, 1:4])
data$TWcp = data$Temp*data$Wind
data$TWrat = data$Temp/data$Wind
#1. Find and report the median value for wind speed and temperature
wind.med = median(data$Wind)
temp.med = median(data$Temp)
#2. Use this median value to create high and low regions on both variables. Show values
#for Temp, Wind, and the two high-low region factors for these variables.
wind.split.med = with(data, Wind >= wind.med)
temp.split.med = with(data, Temp >= temp.med)
data.split.med = data.frame(Ozone = data$Ozone, Solar.R = data$Solar.R,
Wind = data$Wind, Temp = data$Temp, TWcp = data$TWcp,
TWrat = data$TWrat, wind.split = wind.split.med,
temp.split = temp.dasplit.med)
data.split.med = data.frame(Ozone = data$Ozone, Solar.R = data$Solar.R,
Wind = data$Wind, Temp = data$Temp, TWcp = data$TWcp,
TWrat = data$TWrat, wind.split = wind.split.med,
temp.split = temp.split.med)
tmp = data.split.med[, c(3,4,7,8)]
#3. Fit a linear regression with the two region variables.
fit.step.2 = lm(Ozone ~wind.split, temp.split, data = data.split.med)
#(a) Report the results from summary().
summary(fit.step.2)
#(c) Make a 3-D plot of the surface. Report a screenshot from some angle that
#shows the whole surface and describe how the surface changes with
#each variable (use one short sentence each).
with(data, plot3d(Ozone ~ Wind + Temp))
#(c) Make a 3-D plot of the surface. Report a screenshot from some angle that
#shows the whole surface and describe how the surface changes with
#each variable (use one short sentence each).
with(data, plot3d(Ozone ~ Wind + Temp))
data.split.med = data.frame(Ozone = data$Ozone, Wind = data$Wind, Temp = data$Temp,  wind.split = wind.split.med,
temp.split = temp.split.med)
tmp = data.split.med
tmp
#3. Fit a linear regression with the two region variables.
fit.step.2 = lm(Ozone ~wind.split, temp.split, data = data.split.med)
#(a) Report the results from summary().
summary(fit.step.2)
### Construct a grid of values for the two explanatories
vals.wind = seq(from = 2.2, to = 20.8, by = 0.02)
vals.temp = seq(from = 46, to = 98, by = 0.01)
vals.grid = expand.grid(wind = vals.wind, temp = vals.temp)
### Convert this grid of values to a grid of indicators
### The transmute function lets us define new variables, and drops all
### the variables we started with.
split.grid = transmute(vals.grid, wind.split = wind >= wind.med,
temp.split = temp >= temp.med)
### Get predicted values on the grid of indicators
pred.step.2 = predict(fit.step.2, split.grid)
with(data, points3d(Ozone ~ wind + temp, col = "blue"))
### Get predicted values on the grid of indicators
pred.step.2 = predict(fit.step.2, split.grid)
### Plot predicted values and points
persp3d(x = vals.wind, y = vals.temp, z = pred.step.2,
xlab = "wind", ylab = "temp", zlab = "Ozone", col = "orange")
with(data, points3d(Ozone ~ Wind + Temp, col = "blue"))
pred.step.2
####################################################
# 4. Add the interaction of the two region variables to the model
# (a) Report the results from summary().
fit.step.3 = lm(Ozone ~wind.split, temp.split, wind.split:temp.split, data = data.split.med)
summary(fit.step.3)
####################################################
# 4. Add the interaction of the two region variables to the model
# (a) Report the results from summary().
fit.step.3 = lm(Ozone ~wind.split, temp.split, wind.split:temp.split, data = data.split.med)
summary(fit.step.3)
####################################################
# 4. Add the interaction of the two region variables to the model
# (a) Report the results from summary().
fit.step.3 = lm(Ozone ~wind.split, temp.split, wind.split:temp.split, data = data.split.med)
####################################################
# 4. Add the interaction of the two region variables to the model
# (a) Report the results from summary().
fit.step.3 = lm(Ozone ~wind.split, temp.split, wind.split*temp.split, data = data.split.med)
summary(fit.step.3)
prostate <-  read.table("Prostate.csv",
header=TRUE, sep=",", na.strings=" ")
setwd("C:/Users/injoo/OneDrive/Desktop/SFU/STAT 452/Lecture Note/Week 6")
prostate <-  read.table("Prostate.csv",
header=TRUE, sep=",", na.strings=" ")
summary(prostate)
regions[1:10]
regions
head(data.frame(prostate$age,regions))
prostate <-  read.table("Prostate.csv",
header=TRUE, sep=",", na.strings=" ")
summary(prostate)
# The cut() function turns a numeric variable into a factor with
#   levels created by the "breaks=".  Data that fall beyond the
#   do not get assigned to a group!
# By default, intervals are open on the left and closed on the right.
#   Changing that here with "right=FALSE"
regions = cut(x=prostate$age, breaks=c(0, 50, 60, 70, 100),
right=FALSE)
regions[1:10]
head(data.frame(prostate$age,regions))
#  Plot of the data, with lines to indicate groups
x11()
plot(x=prostate$age, y=prostate$lpsa,
main="lpsa vs. age groups for prostate data")
abline(v=c(49.5, 59.5, 69.5), col="red", lty="dotted")
# Run the regression on the age groups
mod.step = lm(prostate$lpsa~regions)
summary(mod.step)
# Get predicted values for age groups.
#  "newdata" has to be a data.frame with the vaiable name from
#     the regression
#  levels() returns the levels of the factor in order, just
#     what we want
age.means = predict(mod.step,
newdata=data.frame(regions=levels(regions)))
# Add lines for means within each level
lines(x=c(0,50), y=rep(age.means[1],2), col="blue", lwd=2)
lines(x=c(50,60), y=rep(age.means[2],2), col="blue", lwd=2)
lines(x=c(60,70), y=rep(age.means[3],2), col="blue", lwd=2)
lines(x=c(70,100), y=rep(age.means[4],2), col="blue", lwd=2)
lcavol.hilo = (prostate$lcavol < median(prostate$lcavol))
pgg45.hilo = (prostate$pgg45 < median(prostate$pgg45))
median(prostate$lcavol)
median(prostate$pgg45)
head(data.frame(prostate$lcavol, lcavol.hilo, prostate$pgg45, pgg45.hilo))
setwd("C:/Users/injoo/OneDrive/Desktop/SFU/STAT 452/Exercise/Exercise 6")
library(dplyr)
library(MASS)   # For ridge regression
library(glmnet) # For LASSO
source("Helper Functions.R")
data = na.omit(airquality[, 1:4])
data$TWcp = data$Temp*data$Wind
data$TWrat = data$Temp/data$Wind
#1. Find and report the median value for wind speed and temperature
wind.med = median(data$Wind)
temp.med = median(data$Temp)
library(dplyr)
library(MASS)   # For ridge regression
library(glmnet) # For LASSO
source("Helper Functions.R")
data = na.omit(airquality[, 1:4])
data$TWcp = data$Temp*data$Wind
data$TWrat = data$Temp/data$Wind
wind.med = median(data$Wind)
temp.med = median(data$Temp)
#2. Use this median value to create high and low regions on both variables. Show values
#for Temp, Wind, and the two high-low region factors for these variables.
wind.hilo = (data$Wind < median(data$Wind))
temp.hilo = (data$Temp < median(data$Temp))
head(data.frame(data$Wind, wind.hilo, data$Temp, temp.hilo))
#3. Fit a linear regression with the two region variables.
mod.2step = lm(data$Ozone ~ wind.hilo + temp.hilo)
#(a) Report the results from summary().
summary(fit.step.2)
#(a) Report the results from summary().
summary(mod.step.2)
#(a) Report the results from summary().
summary(mod.2step)
plot3d(data$Ozone ~ data$Wind + data$Temp, col="blue")
x1 <- seq(from=2.2, to=21, by=.05)
x2 = seq(from=46, to=98, by=.5)
xy1 <- data.frame(expand.grid(Wind=x1, Temp=x2))
xy1c = data.frame(wind.hilo = (xy1$Wind < median(data$Wind)),
temp.hilo = (xy1$Temp < median(data$Temp)))
pred2 <- predict(mod.2step ,newdata=xy1c)
surface2 = matrix(pred2, nrow=length(x1))
open3d()
persp3d(x = x1, y = x2,
z = surface2, col = "orange", xlab="Wind", ylab="Temp",
zlab="Ozone")
points3d(data$Ozone ~ data$Wind + data$Temp, col="blue")
head(data.frame(data$Wind, wind.hilo, data$Temp, temp.hilo))
wind.med = median(data$Wind)
temp.med = median(data$Temp)
wind.med
temp.med
temp.med = median(data$Temp)
#1. Find and report the median value for wind speed and temperature
wind.med = median(data$Wind)
temp.med
wind.med
summary(mod.2step)
####################################################
# 4. Add the interaction of the two region variables to the model
# (a) Report the results from summary().
mod.2step2 = lm(data$Ozone ~ wind.hilo + temp.hilo + wind.hilo * temp.hilo)
summary(mod.2step2)
x1 <- seq(from=2.2, to=21, by=.05)
x2 = seq(from=46, to=98, by=.5)
xy1 <- data.frame(expand.grid(Wind=x1, Temp=x2))
xy1c = data.frame(wind.hilo = (xy1$Wind < median(data$Wind)),
temp.hilo = (xy1$Temp < median(data$Temp)))
pred2 <- predict(mod.2step2 ,newdata=xy1c)
surface2 = matrix(pred2, nrow=length(x1))
open3d()
persp3d(x = x1, y = x2,
z = surface2, col = "orange", xlab="Wind", ylab="Temp",
zlab="Ozone")
points3d(data$Ozone ~ data$Wind + data$, col="blue")
####################################################
# 4. Add the interaction of the two region variables to the model
# (a) Report the results from summary().
mod.2step2 = lm(data$Ozone ~ wind.hilo * temp.hilo)
summary(mod.2step2)
####################################################
# 4. Add the interaction of the two region variables to the model
# (a) Report the results from summary().
mod.2step2 = lm(data$Ozone ~ wind.hilo * temp.hilo)
summary(mod.2step2)
x1 <- seq(from=2.2, to=21, by=.05)
x2 = seq(from=46, to=98, by=.5)
x1 <- seq(from=2.2, to=21, by=.05)
x2 = seq(from=46, to=98, by=.5)
xy1 <- data.frame(expand.grid(Wind=x1, Temp=x2))
xy1c = data.frame(wind.hilo = (xy1$Wind < median(data$Wind)),
temp.hilo = (xy1$Temp < median(data$Temp)))
pred2 <- predict(mod.2step2 ,newdata=xy1c)
surface2 = matrix(pred2, nrow=length(x1))
persp3d(x = x1, y = x2,
z = surface2, col = "orange", xlab="Wind", ylab="Temp",
zlab="Ozone")
persp3d(x = x1, y = x2,
z = surface2, col = "orange", xlab="Wind", ylab="Temp",
zlab="Ozone")
points3d(data$Ozone ~ data$Wind + data$, col="blue")
points3d(data$Ozone ~ data$Wind + data$, col="blue")
points3d(data$Ozone ~ data$Wind + data$Temp col="blue")
points3d(data$Ozone ~ data$Wind + data$Temp ,col="blue")
persp3d(x = x1, y = x2,
z = surface2, col = "orange", xlab="Wind", ylab="Temp",
zlab="Ozone")
points3d(data$Ozone ~ data$Wind + data$Temp ,col="blue")
persp3d(x = x1, y = x2,
z = surface2, col = "orange", xlab="Wind", ylab="Temp",
zlab="Ozone")
x1 <- seq(from=2.2, to=21, by=.05)
x2 = seq(from=46, to=98, by=.5)
xy1 <- data.frame(expand.grid(Wind=x1, Temp=x2))
xy1c = data.frame(wind.hilo = (xy1$Wind < median(data$Wind)),
temp.hilo = (xy1$Temp < median(data$Temp)))
pred2 <- predict(mod.2step2 ,newdata=xy1c)
surface2 = matrix(pred2, nrow=length(x1))
open3d()
persp3d(x = x1, y = x2,
z = surface2, col = "orange", xlab="Wind", ylab="Temp",
zlab="Ozone")
points3d(data$Ozone ~ data$Wind + data$Temp ,col="blue")
