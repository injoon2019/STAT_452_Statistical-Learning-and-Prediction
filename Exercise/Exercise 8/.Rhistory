all.coefs.ridge = coef(fit.ridge)
coef.min = all.coefs.ridge[ind.min.GCV,]
matrix.valid.ridge = model.matrix(Ozone ~ ., data = data.valid)
### Now we can multiply the data by our coefficient vector. The
### syntax in R for matrix-vector multiplication is %*%. Note that,
### for this type of multiplication, order matters. That is,
### A %*% B != B %*% A. Make sure you do data %*% coefficients.
### For more information, see me in a Q&A session or, better still,
### take a course on linear algebra (it's really neat stuff)
pred.ridge = matrix.valid.ridge %*% coef.min
### Now we just need to calculate the MSPE and store it
MSPE.ridge = get.MSPE(Y.valid, pred.ridge)
all.MSPEs[i, "Ridge"] = MSPE.ridge
matrix.train.raw = model.matrix(Ozone ~ ., data = data.train)
matrix.train = matrix.train.raw[,-1]
### LASSO
all.LASSOs = cv.glmnet(x = matrix.train, y = Y.train)
### Get both 'best' lambda values using $lambda.min and $lambda.1se
lambda.min = all.LASSOs$lambda.min
lambda.1se = all.LASSOs$lambda.1se
### Get the coefficients for our two 'best' LASSO models
coef.LASSO.min = predict(all.LASSOs, s = lambda.min, type = "coef")
coef.LASSO.1se = predict(all.LASSOs, s = lambda.1se, type = "coef")
### Get which predictors are included in our models (i.e. which
### predictors have non-zero coefficients)
included.LASSO.min = predict(all.LASSOs, s = lambda.min,
type = "nonzero")
included.LASSO.1se = predict(all.LASSOs, s = lambda.1se,
type = "nonzero")
matrix.valid.LASSO.raw = model.matrix(Ozone ~ ., data = data.valid)
matrix.valid.LASSO = matrix.valid.LASSO.raw[,-1]
pred.LASSO.min = predict(all.LASSOs, newx = matrix.valid.LASSO,
s = lambda.min, type = "response")
pred.LASSO.1se = predict(all.LASSOs, newx = matrix.valid.LASSO,
s = lambda.1se, type = "response")
### Calculate MSPEs and store them
MSPE.LASSO.min = get.MSPE(Y.valid, pred.LASSO.min)
all.MSPEs[i, "LASSO-Min"] = MSPE.LASSO.min
MSPE.LASSO.1se = get.MSPE(Y.valid, pred.LASSO.1se)
all.MSPEs[i, "LASSO-1se"] = MSPE.LASSO.1se
## GAM
fit.gam = gam(Ozone ~ s(Solar.R) + s(Wind) + s(Temp) + s(TWcp) + s(TWrat),
data = data.train)
pred.gam = predict(fit.gam, data.valid)
MSPE.gam = get.MSPE(Y.valid, pred.gam) # Our helper function
all.MSPEs[i, "GAM"] = MSPE.gam
# Full-tree
fit.tree = rpart(Ozone ~ ., data = data, cp=0)
fit.ree.pred = predict(fit.tree, data.valid)
MSPE.fit.tree = get.MSPE(Y.valid, fit.tree)
all.MSPEs[i, "Full-tree"] = MSPE.fit.tree
# Min-cv tree
info.tree = fit.tree$cptable
info.tree
ind.min = which.min(info.tree[,"xerror"])
CP.min.raw = info.tree[ind.min, "CP"]
if(ind.min == 1){
### If minimum CP is in row 1, store this value
CP.min = CP.min.raw
} else{
### If minimum CP is not in row 1, average this with the value from the
### row above it.
### Value from row above
CP.above = info.tree[ind.min-1, "CP"]
### (Geometric) average
CP.min = sqrt(CP.min.raw * CP.above)
}
fit.tree.min = prune(fit.tree, cp = CP.min)
fit.ree.min.pred = predict(fit.tree.min, data.valid)
MSPE.fit.tree.min = get.MSPE(Y.valid, fit.tree.min.pred)
all.MSPEs[i, "Min-cv tree"] = MSPE.fit.tree.min
#"1-se tree"
err.min = info.tree[ind.min, "xerror"]
se.min = info.tree[ind.min, "xstd"]
threshold = err.min + se.min
ind.1se = min(which(info.tree[1:ind.min,"xerror"] < threshold))
### Get the corresponding CP value, averaging if necessary
CP.1se.raw = info.tree[ind.1se, "xerror"]
if(ind.1se == 1){
### If best CP is in row 1, store this value
CP.1se = CP.1se.raw
} else{
### If best CP is not in row 1, average this with the value from the
### row above it.
### Value from row above
CP.above = info.tree[ind.1se-1, "CP"]
### (Geometric) average
CP.1se = sqrt(CP.1se.raw * CP.above)
}
fit.tree.1se = prune(fit.tree, cp = CP.1se)
fit.tree.1se.pred = predict(fit.tree.1se, data.valid)
MSPE.fit.tree.1se = get.MSPE(Y.valid, fit.tree.1se)
all.MSPEs[i, "1-se tree"] = MSPE.fit.tree.1se
}
all.MSPEs
fit.tree = rpart(Ozone ~ ., data = data, cp=0)
fit.ree.pred = predict(fit.tree, data.valid)
MSPE.fit.tree = get.MSPE(Y.valid, fit.tree)
MSPE.fit.tree = get.MSPE(Y.valid, fit.tree.pred)
# Full-tree
fit.tree = rpart(Ozone ~ ., data = data, cp=0)
fit.tree.pred = predict(fit.tree, data.valid)
MSPE.fit.tree = get.MSPE(Y.valid, fit.tree.pred)
all.MSPEs[i, "Full-tree"] = MSPE.fit.tree
K = 10
### Construct folds
n = nrow(data) # Sample size
folds = get.folds(n, K)
### Create a container for MSPEs. Let's include ordinary least-squares
### regression for reference
all.models = c("LS", "Hybrid", "Ridge", "LASSO-Min", "LASSO-1se", "GAM", "Full-tree", "Min-cv tree", "1-se tree")
all.MSPEs = array(0, dim = c(K, length(all.models)))
colnames(all.MSPEs) = all.models
### Begin cross-validation
for(i in 1:K){
### Split data
data.train = data[folds != i,]
data.valid = data[folds == i,]
n.train = nrow(data.train)
### Get response vectors
Y.train = data.train$Ozone
Y.valid = data.valid$Ozone
# LS
fit.ls = lm(Ozone ~ ., data = data.train)
pred.ls = predict(fit.ls, newdata = data.valid)
MSPE.ls = get.MSPE(Y.valid, pred.ls)
all.MSPEs[i, "LS"] = MSPE.ls
#Hybrid Stepwise
fit.start = lm(Ozone ~ 1, data = data.train)
fit.end = lm(Ozone ~ ., data = data.train)
step.BIC = step(fit.start, list(upper = fit.end), k = log(n.train),
trace = 0)
pred.step.BIC = predict(step.BIC, data.valid)
err.step.BIC = get.MSPE(Y.valid, pred.step.BIC)
all.MSPEs[i, "Hybrid"] = err.step.BIC
#ridge regression
lambda.vals = seq(from = 0, to = 100, by = 0.05)
fit.ridge = lm.ridge(Ozone ~ ., lambda = lambda.vals,
data = data.train)
ind.min.GCV = which.min(fit.ridge$GCV)
lambda.min = lambda.vals[ind.min.GCV]
all.coefs.ridge = coef(fit.ridge)
coef.min = all.coefs.ridge[ind.min.GCV,]
matrix.valid.ridge = model.matrix(Ozone ~ ., data = data.valid)
### Now we can multiply the data by our coefficient vector. The
### syntax in R for matrix-vector multiplication is %*%. Note that,
### for this type of multiplication, order matters. That is,
### A %*% B != B %*% A. Make sure you do data %*% coefficients.
### For more information, see me in a Q&A session or, better still,
### take a course on linear algebra (it's really neat stuff)
pred.ridge = matrix.valid.ridge %*% coef.min
### Now we just need to calculate the MSPE and store it
MSPE.ridge = get.MSPE(Y.valid, pred.ridge)
all.MSPEs[i, "Ridge"] = MSPE.ridge
matrix.train.raw = model.matrix(Ozone ~ ., data = data.train)
matrix.train = matrix.train.raw[,-1]
### LASSO
all.LASSOs = cv.glmnet(x = matrix.train, y = Y.train)
### Get both 'best' lambda values using $lambda.min and $lambda.1se
lambda.min = all.LASSOs$lambda.min
lambda.1se = all.LASSOs$lambda.1se
### Get the coefficients for our two 'best' LASSO models
coef.LASSO.min = predict(all.LASSOs, s = lambda.min, type = "coef")
coef.LASSO.1se = predict(all.LASSOs, s = lambda.1se, type = "coef")
### Get which predictors are included in our models (i.e. which
### predictors have non-zero coefficients)
included.LASSO.min = predict(all.LASSOs, s = lambda.min,
type = "nonzero")
included.LASSO.1se = predict(all.LASSOs, s = lambda.1se,
type = "nonzero")
matrix.valid.LASSO.raw = model.matrix(Ozone ~ ., data = data.valid)
matrix.valid.LASSO = matrix.valid.LASSO.raw[,-1]
pred.LASSO.min = predict(all.LASSOs, newx = matrix.valid.LASSO,
s = lambda.min, type = "response")
pred.LASSO.1se = predict(all.LASSOs, newx = matrix.valid.LASSO,
s = lambda.1se, type = "response")
### Calculate MSPEs and store them
MSPE.LASSO.min = get.MSPE(Y.valid, pred.LASSO.min)
all.MSPEs[i, "LASSO-Min"] = MSPE.LASSO.min
MSPE.LASSO.1se = get.MSPE(Y.valid, pred.LASSO.1se)
all.MSPEs[i, "LASSO-1se"] = MSPE.LASSO.1se
## GAM
fit.gam = gam(Ozone ~ s(Solar.R) + s(Wind) + s(Temp) + s(TWcp) + s(TWrat),
data = data.train)
pred.gam = predict(fit.gam, data.valid)
MSPE.gam = get.MSPE(Y.valid, pred.gam) # Our helper function
all.MSPEs[i, "GAM"] = MSPE.gam
# Full-tree
fit.tree = rpart(Ozone ~ ., data = data, cp=0)
fit.tree.pred = predict(fit.tree, data.valid)
MSPE.fit.tree = get.MSPE(Y.valid, fit.tree.pred)
all.MSPEs[i, "Full-tree"] = MSPE.fit.tree
# Min-cv tree
info.tree = fit.tree$cptable
info.tree
ind.min = which.min(info.tree[,"xerror"])
CP.min.raw = info.tree[ind.min, "CP"]
if(ind.min == 1){
### If minimum CP is in row 1, store this value
CP.min = CP.min.raw
} else{
### If minimum CP is not in row 1, average this with the value from the
### row above it.
### Value from row above
CP.above = info.tree[ind.min-1, "CP"]
### (Geometric) average
CP.min = sqrt(CP.min.raw * CP.above)
}
fit.tree.min = prune(fit.tree, cp = CP.min)
fit.ree.min.pred = predict(fit.tree.min, data.valid)
MSPE.fit.tree.min = get.MSPE(Y.valid, fit.tree.min.pred)
all.MSPEs[i, "Min-cv tree"] = MSPE.fit.tree.min
#"1-se tree"
err.min = info.tree[ind.min, "xerror"]
se.min = info.tree[ind.min, "xstd"]
threshold = err.min + se.min
ind.1se = min(which(info.tree[1:ind.min,"xerror"] < threshold))
### Get the corresponding CP value, averaging if necessary
CP.1se.raw = info.tree[ind.1se, "xerror"]
if(ind.1se == 1){
### If best CP is in row 1, store this value
CP.1se = CP.1se.raw
} else{
### If best CP is not in row 1, average this with the value from the
### row above it.
### Value from row above
CP.above = info.tree[ind.1se-1, "CP"]
### (Geometric) average
CP.1se = sqrt(CP.1se.raw * CP.above)
}
fit.tree.1se = prune(fit.tree, cp = CP.1se)
fit.tree.1se.pred = predict(fit.tree.1se, data.valid)
MSPE.fit.tree.1se = get.MSPE(Y.valid, fit.tree.1se)
all.MSPEs[i, "1-se tree"] = MSPE.fit.tree.1se
}
all.MSPEs
### Number of folds
K = 10
### Construct folds
n = nrow(data) # Sample size
folds = get.folds(n, K)
### Create a container for MSPEs. Let's include ordinary least-squares
### regression for reference
all.models = c("LS", "Hybrid", "Ridge", "LASSO-Min", "LASSO-1se", "GAM", "Full-tree", "Min-cv tree", "1-se tree")
all.MSPEs = array(0, dim = c(K, length(all.models)))
colnames(all.MSPEs) = all.models
### Begin cross-validation
for(i in 1:K){
### Split data
data.train = data[folds != i,]
data.valid = data[folds == i,]
n.train = nrow(data.train)
### Get response vectors
Y.train = data.train$Ozone
Y.valid = data.valid$Ozone
# LS
fit.ls = lm(Ozone ~ ., data = data.train)
pred.ls = predict(fit.ls, newdata = data.valid)
MSPE.ls = get.MSPE(Y.valid, pred.ls)
all.MSPEs[i, "LS"] = MSPE.ls
#Hybrid Stepwise
fit.start = lm(Ozone ~ 1, data = data.train)
fit.end = lm(Ozone ~ ., data = data.train)
step.BIC = step(fit.start, list(upper = fit.end), k = log(n.train),
trace = 0)
pred.step.BIC = predict(step.BIC, data.valid)
err.step.BIC = get.MSPE(Y.valid, pred.step.BIC)
all.MSPEs[i, "Hybrid"] = err.step.BIC
#ridge regression
lambda.vals = seq(from = 0, to = 100, by = 0.05)
fit.ridge = lm.ridge(Ozone ~ ., lambda = lambda.vals,
data = data.train)
ind.min.GCV = which.min(fit.ridge$GCV)
lambda.min = lambda.vals[ind.min.GCV]
all.coefs.ridge = coef(fit.ridge)
coef.min = all.coefs.ridge[ind.min.GCV,]
matrix.valid.ridge = model.matrix(Ozone ~ ., data = data.valid)
### Now we can multiply the data by our coefficient vector. The
### syntax in R for matrix-vector multiplication is %*%. Note that,
### for this type of multiplication, order matters. That is,
### A %*% B != B %*% A. Make sure you do data %*% coefficients.
### For more information, see me in a Q&A session or, better still,
### take a course on linear algebra (it's really neat stuff)
pred.ridge = matrix.valid.ridge %*% coef.min
### Now we just need to calculate the MSPE and store it
MSPE.ridge = get.MSPE(Y.valid, pred.ridge)
all.MSPEs[i, "Ridge"] = MSPE.ridge
matrix.train.raw = model.matrix(Ozone ~ ., data = data.train)
matrix.train = matrix.train.raw[,-1]
### LASSO
all.LASSOs = cv.glmnet(x = matrix.train, y = Y.train)
### Get both 'best' lambda values using $lambda.min and $lambda.1se
lambda.min = all.LASSOs$lambda.min
lambda.1se = all.LASSOs$lambda.1se
### Get the coefficients for our two 'best' LASSO models
coef.LASSO.min = predict(all.LASSOs, s = lambda.min, type = "coef")
coef.LASSO.1se = predict(all.LASSOs, s = lambda.1se, type = "coef")
### Get which predictors are included in our models (i.e. which
### predictors have non-zero coefficients)
included.LASSO.min = predict(all.LASSOs, s = lambda.min,
type = "nonzero")
included.LASSO.1se = predict(all.LASSOs, s = lambda.1se,
type = "nonzero")
matrix.valid.LASSO.raw = model.matrix(Ozone ~ ., data = data.valid)
matrix.valid.LASSO = matrix.valid.LASSO.raw[,-1]
pred.LASSO.min = predict(all.LASSOs, newx = matrix.valid.LASSO,
s = lambda.min, type = "response")
pred.LASSO.1se = predict(all.LASSOs, newx = matrix.valid.LASSO,
s = lambda.1se, type = "response")
### Calculate MSPEs and store them
MSPE.LASSO.min = get.MSPE(Y.valid, pred.LASSO.min)
all.MSPEs[i, "LASSO-Min"] = MSPE.LASSO.min
MSPE.LASSO.1se = get.MSPE(Y.valid, pred.LASSO.1se)
all.MSPEs[i, "LASSO-1se"] = MSPE.LASSO.1se
## GAM
fit.gam = gam(Ozone ~ s(Solar.R) + s(Wind) + s(Temp) + s(TWcp) + s(TWrat),
data = data.train)
pred.gam = predict(fit.gam, data.valid)
MSPE.gam = get.MSPE(Y.valid, pred.gam) # Our helper function
all.MSPEs[i, "GAM"] = MSPE.gam
# Full-tree
fit.tree = rpart(Ozone ~ ., data = data, cp=0)
fit.tree.pred = predict(fit.tree, data.valid)
MSPE.fit.tree = get.MSPE(Y.valid, fit.tree.pred)
all.MSPEs[i, "Full-tree"] = MSPE.fit.tree
# Min-cv tree
info.tree = fit.tree$cptable
info.tree
ind.min = which.min(info.tree[,"xerror"])
CP.min.raw = info.tree[ind.min, "CP"]
if(ind.min == 1){
### If minimum CP is in row 1, store this value
CP.min = CP.min.raw
} else{
### If minimum CP is not in row 1, average this with the value from the
### row above it.
### Value from row above
CP.above = info.tree[ind.min-1, "CP"]
### (Geometric) average
CP.min = sqrt(CP.min.raw * CP.above)
}
fit.tree.min = prune(fit.tree, cp = CP.min)
fit.tree.min.pred = predict(fit.tree.min, data.valid)
MSPE.fit.tree.min = get.MSPE(Y.valid, fit.tree.min.pred)
all.MSPEs[i, "Min-cv tree"] = MSPE.fit.tree.min
#"1-se tree"
err.min = info.tree[ind.min, "xerror"]
se.min = info.tree[ind.min, "xstd"]
threshold = err.min + se.min
ind.1se = min(which(info.tree[1:ind.min,"xerror"] < threshold))
### Get the corresponding CP value, averaging if necessary
CP.1se.raw = info.tree[ind.1se, "xerror"]
if(ind.1se == 1){
### If best CP is in row 1, store this value
CP.1se = CP.1se.raw
} else{
### If best CP is not in row 1, average this with the value from the
### row above it.
### Value from row above
CP.above = info.tree[ind.1se-1, "CP"]
### (Geometric) average
CP.1se = sqrt(CP.1se.raw * CP.above)
}
fit.tree.1se = prune(fit.tree, cp = CP.1se)
fit.tree.1se.pred = predict(fit.tree.1se, data.valid)
MSPE.fit.tree.1se = get.MSPE(Y.valid, fit.tree.1se)
all.MSPEs[i, "1-se tree"] = MSPE.fit.tree.1se
}
all.MSPEs
### Number of folds
K = 10
### Construct folds
n = nrow(data) # Sample size
folds = get.folds(n, K)
### Create a container for MSPEs. Let's include ordinary least-squares
### regression for reference
all.models = c("LS", "Hybrid", "Ridge", "LASSO-Min", "LASSO-1se", "GAM", "Full-tree", "Min-cv tree", "1-se tree")
all.MSPEs = array(0, dim = c(K, length(all.models)))
colnames(all.MSPEs) = all.models
### Begin cross-validation
for(i in 1:K){
### Split data
data.train = data[folds != i,]
data.valid = data[folds == i,]
n.train = nrow(data.train)
### Get response vectors
Y.train = data.train$Ozone
Y.valid = data.valid$Ozone
# LS
fit.ls = lm(Ozone ~ ., data = data.train)
pred.ls = predict(fit.ls, newdata = data.valid)
MSPE.ls = get.MSPE(Y.valid, pred.ls)
all.MSPEs[i, "LS"] = MSPE.ls
#Hybrid Stepwise
fit.start = lm(Ozone ~ 1, data = data.train)
fit.end = lm(Ozone ~ ., data = data.train)
step.BIC = step(fit.start, list(upper = fit.end), k = log(n.train),
trace = 0)
pred.step.BIC = predict(step.BIC, data.valid)
err.step.BIC = get.MSPE(Y.valid, pred.step.BIC)
all.MSPEs[i, "Hybrid"] = err.step.BIC
#ridge regression
lambda.vals = seq(from = 0, to = 100, by = 0.05)
fit.ridge = lm.ridge(Ozone ~ ., lambda = lambda.vals,
data = data.train)
ind.min.GCV = which.min(fit.ridge$GCV)
lambda.min = lambda.vals[ind.min.GCV]
all.coefs.ridge = coef(fit.ridge)
coef.min = all.coefs.ridge[ind.min.GCV,]
matrix.valid.ridge = model.matrix(Ozone ~ ., data = data.valid)
### Now we can multiply the data by our coefficient vector. The
### syntax in R for matrix-vector multiplication is %*%. Note that,
### for this type of multiplication, order matters. That is,
### A %*% B != B %*% A. Make sure you do data %*% coefficients.
### For more information, see me in a Q&A session or, better still,
### take a course on linear algebra (it's really neat stuff)
pred.ridge = matrix.valid.ridge %*% coef.min
### Now we just need to calculate the MSPE and store it
MSPE.ridge = get.MSPE(Y.valid, pred.ridge)
all.MSPEs[i, "Ridge"] = MSPE.ridge
matrix.train.raw = model.matrix(Ozone ~ ., data = data.train)
matrix.train = matrix.train.raw[,-1]
### LASSO
all.LASSOs = cv.glmnet(x = matrix.train, y = Y.train)
### Get both 'best' lambda values using $lambda.min and $lambda.1se
lambda.min = all.LASSOs$lambda.min
lambda.1se = all.LASSOs$lambda.1se
### Get the coefficients for our two 'best' LASSO models
coef.LASSO.min = predict(all.LASSOs, s = lambda.min, type = "coef")
coef.LASSO.1se = predict(all.LASSOs, s = lambda.1se, type = "coef")
### Get which predictors are included in our models (i.e. which
### predictors have non-zero coefficients)
included.LASSO.min = predict(all.LASSOs, s = lambda.min,
type = "nonzero")
included.LASSO.1se = predict(all.LASSOs, s = lambda.1se,
type = "nonzero")
matrix.valid.LASSO.raw = model.matrix(Ozone ~ ., data = data.valid)
matrix.valid.LASSO = matrix.valid.LASSO.raw[,-1]
pred.LASSO.min = predict(all.LASSOs, newx = matrix.valid.LASSO,
s = lambda.min, type = "response")
pred.LASSO.1se = predict(all.LASSOs, newx = matrix.valid.LASSO,
s = lambda.1se, type = "response")
### Calculate MSPEs and store them
MSPE.LASSO.min = get.MSPE(Y.valid, pred.LASSO.min)
all.MSPEs[i, "LASSO-Min"] = MSPE.LASSO.min
MSPE.LASSO.1se = get.MSPE(Y.valid, pred.LASSO.1se)
all.MSPEs[i, "LASSO-1se"] = MSPE.LASSO.1se
## GAM
fit.gam = gam(Ozone ~ s(Solar.R) + s(Wind) + s(Temp) + s(TWcp) + s(TWrat),
data = data.train)
pred.gam = predict(fit.gam, data.valid)
MSPE.gam = get.MSPE(Y.valid, pred.gam) # Our helper function
all.MSPEs[i, "GAM"] = MSPE.gam
# Full-tree
fit.tree = rpart(Ozone ~ ., data = data, cp=0)
fit.tree.pred = predict(fit.tree, data.valid)
MSPE.fit.tree = get.MSPE(Y.valid, fit.tree.pred)
all.MSPEs[i, "Full-tree"] = MSPE.fit.tree
# Min-cv tree
info.tree = fit.tree$cptable
info.tree
ind.min = which.min(info.tree[,"xerror"])
CP.min.raw = info.tree[ind.min, "CP"]
if(ind.min == 1){
### If minimum CP is in row 1, store this value
CP.min = CP.min.raw
} else{
### If minimum CP is not in row 1, average this with the value from the
### row above it.
### Value from row above
CP.above = info.tree[ind.min-1, "CP"]
### (Geometric) average
CP.min = sqrt(CP.min.raw * CP.above)
}
fit.tree.min = prune(fit.tree, cp = CP.min)
fit.tree.min.pred = predict(fit.tree.min, data.valid)
MSPE.fit.tree.min = get.MSPE(Y.valid, fit.tree.min.pred)
all.MSPEs[i, "Min-cv tree"] = MSPE.fit.tree.min
#"1-se tree"
err.min = info.tree[ind.min, "xerror"]
se.min = info.tree[ind.min, "xstd"]
threshold = err.min + se.min
ind.1se = min(which(info.tree[1:ind.min,"xerror"] < threshold))
### Get the corresponding CP value, averaging if necessary
CP.1se.raw = info.tree[ind.1se, "xerror"]
if(ind.1se == 1){
### If best CP is in row 1, store this value
CP.1se = CP.1se.raw
} else{
### If best CP is not in row 1, average this with the value from the
### row above it.
### Value from row above
CP.above = info.tree[ind.1se-1, "CP"]
### (Geometric) average
CP.1se = sqrt(CP.1se.raw * CP.above)
}
fit.tree.1se = prune(fit.tree, cp = CP.1se)
fit.tree.1se.pred = predict(fit.tree.1se, data.valid)
MSPE.fit.tree.1se = get.MSPE(Y.valid, fit.tree.1se.pred)
all.MSPEs[i, "1-se tree"] = MSPE.fit.tree.1se
}
all.MSPEs
mean(all.MSPEs[,7])
mean(all.MSPEs[,8])
mean(all.MSPEs[,9])
all.RMSPEs = apply(all.MSPEs, 1, function(W){
best = min(W)
return(W / best)
})
all.RMSPEs = t(all.RMSPEs)
### Make a boxplot of RMSPEs
boxplot(all.RMSPEs, main = paste0("CV RMSPEs over ", K, " folds"))
