library(dplyr)
library(MASS)   # For ridge regression
library(glmnet) # For LASSO
source("Helper Functions.R")
data = na.omit(airquality[, 1:4])
data$TWcp = data$Temp*data$Wind
data$TWrat = data$Temp/data$Wind
#1. Find and report the median value for wind speed and temperature
wind.med = median(data$Wind)
temp.med = median(data$Temp)
#2. Use this median value to create high and low regions on both variables. Show values
#for Temp, Wind, and the two high-low region factors for these variables.
wind.split.med = with(data, Wind >= wind.med)
temp.split.med = with(data, Temp >= temp.med)
data.split.med = data.frame(Ozone = data$Ozone, Solar.R = data$Solar.R,
Wind = data$Wind, Temp = data$Temp, TWcp = data$TWcp,
TWrat = data$TWrat, wind.split = wind.split.med,
temp.split = temp.dasplit.med)
tmp = data.split.med[, c(3,4,7,8)]
tmp
#3. Fit a linear regression with the two region variables.
fit.step.2 = lm(Ozone ~wind.split, temp.split, data = data.split.med)
#(a) Report the results from summary().
summary(fit.step.2)
with(data, plot3d(Ozone ~ Wind + Temp))
#Wind range: 2.3~ 20.7
#Temp range: 47~ 97
vals.wind = seq(from = 2.3, to = 20.7, by = 0.002)
vals.temp = seq(from = 47, to = 98, by = 0.01)
vals.grid = expand.grid(wind = vals.wind, temp = vals.temp)
split.grid = transmute(vals.grid, wind.split = wind >= wind.med,
temp.split = temp >= temp.med)
pred.step.2 = predict(fit.step.2, split.grid)
### Plot predicted values and points
persp3d(x = vals.wind, y = vals.temp, z = pred.step.2,
xlab = "wind", ylab = "temp", zlab = "Ozone", col = "orange")
library(rgl)
### Plot predicted values and points
persp3d(x = vals.wind, y = vals.temp, z = pred.step.2,
xlab = "wind", ylab = "temp", zlab = "Ozone", col = "orange")
library(dplyr)
library(rgl)
library(MASS)   # For ridge regression
library(glmnet) # For LASSO
source("Helper Functions.R")
data = na.omit(airquality[, 1:4])
data$TWcp = data$Temp*data$Wind
data$TWrat = data$Temp/data$Wind
#1. Find and report the median value for wind speed and temperature
wind.med = median(data$Wind)
temp.med = median(data$Temp)
wind.split.med = with(data, Wind >= wind.med)
temp.split.med = with(data, Temp >= temp.med)
data.split.med = data.frame(Ozone = data$Ozone, Solar.R = data$Solar.R,
Wind = data$Wind, Temp = data$Temp, TWcp = data$TWcp,
TWrat = data$TWrat, wind.split = wind.split.med,
temp.split = temp.dasplit.med)
tmp = data.split.med[, c(3,4,7,8)]
tmp
tmp = data.split.med[, c(3,4,7,8)]
data.split.med = data.frame(Ozone = data$Ozone, Solar.R = data$Solar.R,
Wind = data$Wind, Temp = data$Temp, TWcp = data$TWcp,
TWrat = data$TWrat, wind.split = wind.split.med,
temp.split = temp.dasplit.med)
data.split.med = data.frame(Ozone = data$Ozone, Solar.R = data$Solar.R,
Wind = data$Wind, Temp = data$Temp, TWcp = data$TWcp,
TWrat = data$TWrat, wind.split = wind.split.med,
temp.split = temp.split.med)
tmp = data.split.med[, c(3,4,7,8)]
tmp
#3. Fit a linear regression with the two region variables.
fit.step.2 = lm(Ozone ~wind.split, temp.split, data = data.split.med)
#(a) Report the results from summary().
summary(fit.step.2)
#(c) Make a 3-D plot of the surface. Report a screenshot from some angle that
#shows the whole surface and describe how the surface changes with
#each variable (use one short sentence each).
with(data, plot3d(Ozone ~ Wind + Temp))
#Temp range: 47~ 97
vals.wind = seq(from = 2.3, to = 20.7, by = 0.002)
vals.temp = seq(from = 47, to = 98, by = 0.01)
vals.grid = expand.grid(wind = vals.wind, temp = vals.temp)
split.grid = transmute(vals.grid, wind.split = wind >= wind.med,
temp.split = temp >= temp.med)
pred.step.2 = predict(fit.step.2, split.grid)
### Plot predicted values and points
persp3d(x = vals.wind, y = vals.temp, z = pred.step.2,
xlab = "wind", ylab = "temp", zlab = "Ozone", col = "orange")
with(data, points3d(Ozone ~ Wind + Temp, col = "blue"))
#Wind range: 2.3~ 20.7
#Temp range: 47~ 97
vals.wind = seq(from = 2.3, to = 20.7, by = 0.02)
vals.temp = seq(from = 47, to = 98, by = 0.01)
vals.grid = expand.grid(wind = vals.wind, temp = vals.temp)
split.grid = transmute(vals.grid, wind.split = wind >= wind.med,
temp.split = temp >= temp.med)
pred.step.2 = predict(fit.step.2, split.grid)
### Plot predicted values and points
persp3d(x = vals.wind, y = vals.temp, z = pred.step.2,
xlab = "wind", ylab = "temp", zlab = "Ozone", col = "orange")
with(data, points3d(Ozone ~ Wind + Temp, col = "blue"))
prostate <-  read.table("Prostate.csv",
header=TRUE, sep=",", na.strings=" ")
setwd("C:/Users/injoo/OneDrive/Desktop/SFU/STAT 452/Lecture Note/Week 6")
prostate <-  read.table("Prostate.csv",
header=TRUE, sep=",", na.strings=" ")
summary(prostate)
# The cut() function turns a numeric variable into a factor with
#   levels created by the "breaks=".  Data that fall beyond the
#   do not get assigned to a group!
# By default, intervals are open on the left and closed on the right.
#   Changing that here with "right=FALSE"
regions = cut(x=prostate$age, breaks=c(0, 50, 60, 70, 100),
right=FALSE)
regions[1:10]
head(data.frame(prostate$age,regions))
#  Plot of the data, with lines to indicate groups
x11()
plot(x=prostate$age, y=prostate$lpsa,
main="lpsa vs. age groups for prostate data")
abline(v=c(49.5, 59.5, 69.5), col="red", lty="dotted")
# Run the regression on the age groups
mod.step = lm(prostate$lpsa~regions)
summary(mod.step)
# Get predicted values for age groups.
#  "newdata" has to be a data.frame with the vaiable name from
#     the regression
#  levels() returns the levels of the factor in order, just
#     what we want
age.means = predict(mod.step,
newdata=data.frame(regions=levels(regions)))
# Add lines for means within each level
lines(x=c(0,50), y=rep(age.means[1],2), col="blue", lwd=2)
lines(x=c(50,60), y=rep(age.means[2],2), col="blue", lwd=2)
lines(x=c(60,70), y=rep(age.means[3],2), col="blue", lwd=2)
lines(x=c(70,100), y=rep(age.means[4],2), col="blue", lwd=2)
lcavol.hilo = (prostate$lcavol < median(prostate$lcavol))
pgg45.hilo = (prostate$pgg45 < median(prostate$pgg45))
median(prostate$lcavol)
median(prostate$pgg45)
head(data.frame(prostate$lcavol, lcavol.hilo, prostate$pgg45, pgg45.hilo))
tail(data.frame(prostate$lcavol, lcavol.hilo, prostate$pgg45, pgg45.hilo))
#No interaction
mod.2step = lm(prostate$lpsa ~ lcavol.hilo + pgg45.hilo)
library(rgl)
open3d()
plot3d(prostate$lpsa ~ prostate$lcavol + prostate$pgg45, col="blue")
x1 <- seq(from=-2, to=4, by=.05)
x2 = seq(from=0, to=100, by=.5)
xy1 <- data.frame(expand.grid(lcavol=x1, pgg45=x2))
xy1c = data.frame(lcavol.hilo = (xy1$lcavol < median(prostate$lcavol)),
pgg45.hilo = (xy1$pgg45 < median(prostate$pgg45)))
pred2 <- predict(mod.2step ,newdata=xy1c)
surface2 = matrix(pred2, nrow=length(x1))
persp3d(x = x1, y = x2,
z = surface2, col = "orange", xlab="lcavol", ylab="pgg45",
zlab="Predicted lpsa")
points3d(prostate$lpsa ~ prostate$lcavol + prostate$pgg45, col="blue")
setwd("C:/Users/injoo/OneDrive/Desktop/SFU/STAT 452/Tutorial/Lecture8_9")
# Step Functions
library(dplyr)
library(rgl)
source("Read Wine Data.R")
breaks = c(0, 0.99, 0.993, 0.996, 0.999, 1.1)
regions = cut(data$density, breaks)
data.regions = data.frame(density = data$density, region = regions)
head(data.regions)
regions = cut(data$density, breaks)
# Step Functions
library(dplyr)
library(rgl)
source("Read Wine Data.R")
# Step Functions
library(dplyr)
library(rgl)
source("Read Wine Data.R")
breaks = c(0, 0.99, 0.993, 0.996, 0.999, 1.1)
regions = cut(data$density, breaks)
library(dplyr)
library(rgl)
### Run a new script for reading the data
source("Read Wine Data.R")
### Run a new script for reading the data
source("Read Wine Data.R")
### Run a new script for reading the data
source("Read Wine Data.R")
### Choose breakpoints and construct regions. We use the cut() function
### to construct a categorical variable based on regions for a numeric
### variable.
breaks = c(0, 0.99, 0.993, 0.996, 0.999, 1.1)
regions = cut(data$density, breaks)
data.regions = data.frame(density = data$density, region = regions)
head(data.regions)
### Plot relationship between density and alcohol
with(data, plot(density, alcohol))
### Add breakpoints
abline(v = breaks[2:5], lty = 2)
