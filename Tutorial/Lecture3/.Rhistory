### Use our get.MSPE() function to calculate the validation set MSPE
### of each model
Y.valid = data.valid$alcohol
MSPE.sugar = get.MSPE(Y.valid, pred.sugar)
MSPE.density = get.MSPE(Y.valid, pred.density)
MSPE.pH = get.MSPE(Y.valid, pred.pH)
MSPE.sulphates = get.MSPE(Y.valid, pred.sulphates)
MSPE.all = get.MSPE(Y.valid, pred.all)
MSPE.int = get.MSPE(Y.valid, pred.int)
# This part is new ! Put calculated MSPEs into a single vector, then return this vector
this.MSPEs = c(MSPE.sugar, MSPE.density, MSPE.pH, MSPE.sulphates, MSPE.all, MSPE.int)
name(this.MSPEs) = c("sugar", "density", "pH", "sulphates", "all", "int")
return(this.mSPEs)
})
all.split.MSPEs = replicate(M, {
### Split the data into training and test sets.
### 75%/25% seems reasonable
new.order = sample.int(n) ### Shuffled numbers from 1 to n
ind.train = which(new.order <= n * 0.75) ### Indices of observations
### to put in training set
ind.valid = which(new.order > n * 0.75) ### Indices of observations
### to put in validation set
data.train = data[ind.train, ] ### Keep only observations in ind.train
data.valid = data[ind.valid, ] ### Keep only observations in ind.valid
### Fit linear models to predict alcohol using each predictor
### individually, all predictors together, and all interactions
### Note: These models must be fit using data.train so that we can
### evaluate their MSPE on data.valid
fit.sugar = lm(alcohol ~ sugar, data = data.train)
fit.density = lm(alcohol ~ density, data = data.train)
fit.pH = lm(alcohol ~ pH, data = data.train)
fit.sulphates = lm(alcohol ~ sulphates, data = data.train)
fit.all = lm(alcohol ~ ., data = data.train)
fit.int = lm(alcohol ~ . ^ 2, data = data.train)
### Get predictions on the validation set for each model using the
### predict() function.
pred.sugar = predict(fit.sugar, data.valid)
pred.density = predict(fit.density, data.valid)
pred.pH = predict(fit.pH, data.valid)
pred.sulphates = predict(fit.sulphates, data.valid)
pred.all = predict(fit.all, data.valid)
pred.int = predict(fit.int, data.valid)
### Use our get.MSPE() function to calculate the validation set MSPE
### of each model
Y.valid = data.valid$alcohol
MSPE.sugar = get.MSPE(Y.valid, pred.sugar)
MSPE.density = get.MSPE(Y.valid, pred.density)
MSPE.pH = get.MSPE(Y.valid, pred.pH)
MSPE.sulphates = get.MSPE(Y.valid, pred.sulphates)
MSPE.all = get.MSPE(Y.valid, pred.all)
MSPE.int = get.MSPE(Y.valid, pred.int)
# This part is new ! Put calculated MSPEs into a single vector, then return this vector
this.MSPEs = c(MSPE.sugar, MSPE.density, MSPE.pH, MSPE.sulphates, MSPE.all, MSPE.int)
names(this.MSPEs) = c("sugar", "density", "pH", "sulphates", "all", "int")
return(this.mSPEs)
})
all.split.MSPEs = replicate(M, {
### Split the data into training and test sets.
### 75%/25% seems reasonable
new.order = sample.int(n) ### Shuffled numbers from 1 to n
ind.train = which(new.order <= n * 0.75) ### Indices of observations
### to put in training set
ind.valid = which(new.order > n * 0.75) ### Indices of observations
### to put in validation set
data.train = data[ind.train, ] ### Keep only observations in ind.train
data.valid = data[ind.valid, ] ### Keep only observations in ind.valid
### Fit linear models to predict alcohol using each predictor
### individually, all predictors together, and all interactions
### Note: These models must be fit using data.train so that we can
### evaluate their MSPE on data.valid
fit.sugar = lm(alcohol ~ sugar, data = data.train)
fit.density = lm(alcohol ~ density, data = data.train)
fit.pH = lm(alcohol ~ pH, data = data.train)
fit.sulphates = lm(alcohol ~ sulphates, data = data.train)
fit.all = lm(alcohol ~ ., data = data.train)
fit.int = lm(alcohol ~ . ^ 2, data = data.train)
### Get predictions on the validation set for each model using the
### predict() function.
pred.sugar = predict(fit.sugar, data.valid)
pred.density = predict(fit.density, data.valid)
pred.pH = predict(fit.pH, data.valid)
pred.sulphates = predict(fit.sulphates, data.valid)
pred.all = predict(fit.all, data.valid)
pred.int = predict(fit.int, data.valid)
### Use our get.MSPE() function to calculate the validation set MSPE
### of each model
Y.valid = data.valid$alcohol
MSPE.sugar = get.MSPE(Y.valid, pred.sugar)
MSPE.density = get.MSPE(Y.valid, pred.density)
MSPE.pH = get.MSPE(Y.valid, pred.pH)
MSPE.sulphates = get.MSPE(Y.valid, pred.sulphates)
MSPE.all = get.MSPE(Y.valid, pred.all)
MSPE.int = get.MSPE(Y.valid, pred.int)
# This part is new ! Put calculated MSPEs into a single vector, then return this vector
this.MSPEs = c(MSPE.sugar, MSPE.density, MSPE.pH, MSPE.sulphates, MSPE.all, MSPE.int)
names(this.MSPEs) = c("sugar", "density", "pH", "sulphates", "all", "int")
return(this.MSPEs)
})
### Note: replicate() returns an array with different models
### corresponding to different rows. I would rather have models
### correspond to columns. We can swap rows and columns of an array
### (or similar object) using the t() function.
all.split.MSPEs = t(all.split.MSPEs)
boxplot(all.split.MSPEs, main="Boxplot of validation set MSPEs for 10 data splits")
rel.split.MSPEs = apply(all.split.MSPEs, 1, function(W){
best = min(W)
return(W/best)
})
rel.split.MSPEs = t(rel.split.MSPEs)
boxplot(rel.split.MSPEs, main="Boxplot of relative validation set MSPEs for 10 data splits")
n.fold = n/10 # Number of observations in each fold
n.fold = ceiling(n.fold) # Round up to make sure we get enough labels
# We can remove any excess later
ordered.ids = rep(1:10, times = n.fold)
ordered.ids = ordered.ids[1:n] # Remove excess label
shuffle = sample.int(n) #Randomly permute the numbers 1 to n
shuffle = smaple.int(n) #Randomly permute the numbers 1 to n
shuffled.ids = ordered.ids[shuffle] #Use shuffle to permute the fold labels
data.CV = data # Crerate a copy of our dataset
data.CV$fold = shuffled.ids # Add a column to our new dataset containing the fold labels
for(i in 1:10){
data.train = filter(data.cv, fold != i)
data.valid = filter(data.CV, fold==i)
#Remove fold from training and validation sets since it isn't a real predictor
data.train = select(data.train, -fold)
data.valid = select(data.valid, -fold)
fit.sugar = lm(alcohol ~ sugar, data = data.train)
fit.density = lm(alcohol ~ density, data = data.train)
fit.pH = lm(alcohol ~ pH, data = data.train)
fit.sulphates = lm(alcohol ~ sulphates, data = data.train)
fit.all = lm(alcohol ~ ., data = data.train)
fit.int = lm(alcohol ~ . ^ 2, data = data.train)
### Get predictions on the validation set for each model using the
### predict() function.
pred.sugar = predict(fit.sugar, data.valid)
pred.density = predict(fit.density, data.valid)
pred.pH = predict(fit.pH, data.valid)
pred.sulphates = predict(fit.sulphates, data.valid)
pred.all = predict(fit.all, data.valid)
pred.int = predict(fit.int, data.valid)
### Use our get.MSPE() function to calculate the validation set MSPE
### of each model
Y.valid = data.valid$alcohol
MSPE.sugar = get.MSPE(Y.valid, pred.sugar)
MSPE.density = get.MSPE(Y.valid, pred.density)
MSPE.pH = get.MSPE(Y.valid, pred.pH)
MSPE.sulphates = get.MSPE(Y.valid, pred.sulphates)
MSPE.all = get.MSPE(Y.valid, pred.all)
MSPE.int = get.MSPE(Y.valid, pred.int)
### Store MSPEs
CV.MSPEs[i, 1] = MSPE.sugar
CV.MSPEs[i, 2] = MSPE.density
CV.MSPEs[i, 3] = MSPE.pH
CV.MSPEs[i, 4] = MSPE.sulphates
CV.MSPEs[i, 5] = MSPE.all
CV.MSPEs[i, 6] = MSPE.int
}
# these to our dataset as fold labels.
n.fold = n/10 # Number of observations in each fold
n.fold = ceiling(n.fold) # Round up to make sure we get enough labels
# We can remove any excess later
ordered.ids = rep(1:10, times = n.fold)
ordered.ids = ordered.ids[1:n] # Remove excess label
shuffle = sample.int(n) #Randomly permute the numbers 1 to n
shuffle = smaple.int(n) #Randomly permute the numbers 1 to n
shuffled.ids = ordered.ids[shuffle] #Use shuffle to permute the fold labels
data.CV = data # Crerate a copy of our dataset
data.CV$fold = shuffled.ids # Add a column to our new dataset containing the fold labels
# Next, let's actaully do the cross validation.
CV.MSPEs = array(0, dim - c(10, 6)) # An array to store valeus
colnames(CV.MSPEs) = colnames(all.split.MSPEs) #
for(i in 1:10){
data.train = filter(data.cv, fold != i)
data.valid = filter(data.CV, fold==i)
#Remove fold from training and validation sets since it isn't a real predictor
data.train = select(data.train, -fold)
data.valid = select(data.valid, -fold)
fit.sugar = lm(alcohol ~ sugar, data = data.train)
fit.density = lm(alcohol ~ density, data = data.train)
fit.pH = lm(alcohol ~ pH, data = data.train)
fit.sulphates = lm(alcohol ~ sulphates, data = data.train)
fit.all = lm(alcohol ~ ., data = data.train)
fit.int = lm(alcohol ~ . ^ 2, data = data.train)
### Get predictions on the validation set for each model using the
### predict() function.
pred.sugar = predict(fit.sugar, data.valid)
pred.density = predict(fit.density, data.valid)
pred.pH = predict(fit.pH, data.valid)
pred.sulphates = predict(fit.sulphates, data.valid)
pred.all = predict(fit.all, data.valid)
pred.int = predict(fit.int, data.valid)
### Use our get.MSPE() function to calculate the validation set MSPE
### of each model
Y.valid = data.valid$alcohol
MSPE.sugar = get.MSPE(Y.valid, pred.sugar)
MSPE.density = get.MSPE(Y.valid, pred.density)
MSPE.pH = get.MSPE(Y.valid, pred.pH)
MSPE.sulphates = get.MSPE(Y.valid, pred.sulphates)
MSPE.all = get.MSPE(Y.valid, pred.all)
MSPE.int = get.MSPE(Y.valid, pred.int)
### Store MSPEs
CV.MSPEs[i, 1] = MSPE.sugar
CV.MSPEs[i, 2] = MSPE.density
CV.MSPEs[i, 3] = MSPE.pH
CV.MSPEs[i, 4] = MSPE.sulphates
CV.MSPEs[i, 5] = MSPE.all
CV.MSPEs[i, 6] = MSPE.int
}
data.CV = data #
data.CV$fold = shuffled.ids
n.fold = n/10 # Number of observations in each fold
n.fold = ceiling(n.fold) # Round up to make sure we get enough labels
# We can remove any excess later
ordered.ids = rep(1:10, times = n.fold)
ordered.ids = ordered.ids[1:n] # Remove excess label
shuffle = sample.int(n) #Randomly permute the numbers 1 to n
shuffle = smaple.int(n) #Randomly permute the numbers 1 to n
shuffled.ids = ordered.ids[shuffle] #Use shuffle to permute the fold labels
data.CV = data # Crerate a copy of our dataset
data.CV$fold = shuffled.ids #
CV.MSPEs = array(0, dim - c(10, 6)) # An array to store valeus
colnames(CV.MSPEs) = colnames(all.split.MSPEs) #
CV.MSPEs = array(0, dim - c(10, 6)) # An array to store valeus
colnames(CV.MSPEs) = colnames(all.split.MSPEs) #
CV.MSPEs = array(0, dim = c(10, 6)) # An array to store valeus
colnames(CV.MSPEs) = colnames(all.split.MSPEs) #
for(i in 1:10){
data.train = filter(data.cv, fold != i)
data.valid = filter(data.CV, fold==i)
#Remove fold from training and validation sets since it isn't a real predictor
data.train = select(data.train, -fold)
data.valid = select(data.valid, -fold)
fit.sugar = lm(alcohol ~ sugar, data = data.train)
fit.density = lm(alcohol ~ density, data = data.train)
fit.pH = lm(alcohol ~ pH, data = data.train)
fit.sulphates = lm(alcohol ~ sulphates, data = data.train)
fit.all = lm(alcohol ~ ., data = data.train)
fit.int = lm(alcohol ~ . ^ 2, data = data.train)
### Get predictions on the validation set for each model using the
### predict() function.
pred.sugar = predict(fit.sugar, data.valid)
pred.density = predict(fit.density, data.valid)
pred.pH = predict(fit.pH, data.valid)
pred.sulphates = predict(fit.sulphates, data.valid)
pred.all = predict(fit.all, data.valid)
pred.int = predict(fit.int, data.valid)
### Use our get.MSPE() function to calculate the validation set MSPE
### of each model
Y.valid = data.valid$alcohol
MSPE.sugar = get.MSPE(Y.valid, pred.sugar)
MSPE.density = get.MSPE(Y.valid, pred.density)
MSPE.pH = get.MSPE(Y.valid, pred.pH)
MSPE.sulphates = get.MSPE(Y.valid, pred.sulphates)
MSPE.all = get.MSPE(Y.valid, pred.all)
MSPE.int = get.MSPE(Y.valid, pred.int)
### Store MSPEs
CV.MSPEs[i, 1] = MSPE.sugar
CV.MSPEs[i, 2] = MSPE.density
CV.MSPEs[i, 3] = MSPE.pH
CV.MSPEs[i, 4] = MSPE.sulphates
CV.MSPEs[i, 5] = MSPE.all
CV.MSPEs[i, 6] = MSPE.int
}
for(i in 1:10){
data.train = filter(data.CV, fold != i)
data.valid = filter(data.CV, fold==i)
#Remove fold from training and validation sets since it isn't a real predictor
data.train = select(data.train, -fold)
data.valid = select(data.valid, -fold)
fit.sugar = lm(alcohol ~ sugar, data = data.train)
fit.density = lm(alcohol ~ density, data = data.train)
fit.pH = lm(alcohol ~ pH, data = data.train)
fit.sulphates = lm(alcohol ~ sulphates, data = data.train)
fit.all = lm(alcohol ~ ., data = data.train)
fit.int = lm(alcohol ~ . ^ 2, data = data.train)
### Get predictions on the validation set for each model using the
### predict() function.
pred.sugar = predict(fit.sugar, data.valid)
pred.density = predict(fit.density, data.valid)
pred.pH = predict(fit.pH, data.valid)
pred.sulphates = predict(fit.sulphates, data.valid)
pred.all = predict(fit.all, data.valid)
pred.int = predict(fit.int, data.valid)
### Use our get.MSPE() function to calculate the validation set MSPE
### of each model
Y.valid = data.valid$alcohol
MSPE.sugar = get.MSPE(Y.valid, pred.sugar)
MSPE.density = get.MSPE(Y.valid, pred.density)
MSPE.pH = get.MSPE(Y.valid, pred.pH)
MSPE.sulphates = get.MSPE(Y.valid, pred.sulphates)
MSPE.all = get.MSPE(Y.valid, pred.all)
MSPE.int = get.MSPE(Y.valid, pred.int)
### Store MSPEs
CV.MSPEs[i, 1] = MSPE.sugar
CV.MSPEs[i, 2] = MSPE.density
CV.MSPEs[i, 3] = MSPE.pH
CV.MSPEs[i, 4] = MSPE.sulphates
CV.MSPEs[i, 5] = MSPE.all
CV.MSPEs[i, 6] = MSPE.int
}
boxplot(CV.MSPEs, main="Boxplot of CV Error With 10 Folds")
CV.MSPEs
rel.CV.MSPEs = apply(CV.MSPEs, 1, function(W){
best = min(W)
return (W/best)
})
rel.CV.MSPEs = t(rel.CV.MSPEs)
boxplot(Rel.CV.MSPEs, main="Boxplot of Relative CV Error with 10 folds")
boxplot(rel.CV.MSPEs, main="Boxplot of Relative CV Error with 10 folds")
### I like to generate indices for boostrap sampling inside the
### for loop, so all we need now is the array.
boot.MSPEs = array(0, dim = c(10, 6))
colnames(boot.MSPEs) = colnames(CV.MSPEs)
for(i in 1:10){
### Generate the indices for our training sample. Boostrap resampling
### is done with replacement, so we need to set replace = T (i.e. TRUE)
ids.train = sample.int(n, replace = T)
### There is a nice shortcut we can use to get the validation set
### indices. The setdiff() function gives us all the elements of
### the first list which are not also in the second list.
ids.valid = setdiff(1:n, ids.train)
### Now we can get our training/validation sets and get the MSPEs
### Using ids.train as a row index for data will copy any rows
### that are copied in ids.train.
data.train = data[ids.train,]
data.valid = data[ids.valid,]
###################################################################
### This code is essentially identical to the for loop we used  ###
### for data splitting. If you understood that, don't worry too ###
### much about going through this code in-depth                 ###
###################################################################
### Fit linear models to predict alcohol using each predictor
### individually, all predictors together, and all interactions
### Note: These models must be fit using data.train so that we can
### evaluate their MSPE on data.valid
fit.sugar = lm(alcohol ~ sugar, data = data.train)
fit.density = lm(alcohol ~ density, data = data.train)
fit.pH = lm(alcohol ~ pH, data = data.train)
fit.sulphates = lm(alcohol ~ sulphates, data = data.train)
fit.all = lm(alcohol ~ ., data = data.train)
fit.int = lm(alcohol ~ . ^ 2, data = data.train)
### Get predictions on the validation set for each model using the
### predict() function.
pred.sugar = predict(fit.sugar, data.valid)
pred.density = predict(fit.density, data.valid)
pred.pH = predict(fit.pH, data.valid)
pred.sulphates = predict(fit.sulphates, data.valid)
pred.all = predict(fit.all, data.valid)
pred.int = predict(fit.int, data.valid)
### Use our get.MSPE() function to calculate the validation set MSPE
### of each model
Y.valid = data.valid$alcohol
MSPE.sugar = get.MSPE(Y.valid, pred.sugar)
MSPE.density = get.MSPE(Y.valid, pred.density)
MSPE.pH = get.MSPE(Y.valid, pred.pH)
MSPE.sulphates = get.MSPE(Y.valid, pred.sulphates)
MSPE.all = get.MSPE(Y.valid, pred.all)
MSPE.int = get.MSPE(Y.valid, pred.int)
### Store MSPEs
boot.MSPEs[i, 1] = MSPE.sugar
boot.MSPEs[i, 2] = MSPE.density
boot.MSPEs[i, 3] = MSPE.pH
boot.MSPEs[i, 4] = MSPE.sulphates
boot.MSPEs[i, 5] = MSPE.all
boot.MSPEs[i, 6] = MSPE.int
}
### Make a boxplot of the scores
boxplot(boot.MSPEs,
main = "Boxplot of Bootstrap Error With 10 Resamples")
### Calculate relative errors and make boxplots
rel.boot.MSPEs = apply(boot.MSPEs, 1, function(W){
best = min(W)
return(W / best)
})
rel.boot.MSPEs = t(rel.boot.MSPEs)
boxplot(rel.boot.MSPEs,
main = "Boxplot of Relative Bootstrap Error With 10 Resamples")
rel.boot.MSPEs = apply(boot.MSPEs, 1, function(W){
best = min(W)
return(W / best)
})
rel.boot.MSPEs = t(rel.boot.MSPEs)
boxplot(rel.boot.MSPEs,
main = "Boxplot of Relative Bootstrap Error With 10 Resamples")
n.rep = 20 # Number of times to repeat CV/boostrap
### Start with CV. First, we need a container to store the average CV
### errors
ave.CV.MSPEs = array(0, dim = c(n.rep, 6))
colnames(ave.CV.MSPEs) = colnames(CV.MSPEs)
### We will put the entire CV section from above inside another
### for loop. This will repeat the entire CV process
### Note: we need to use a different loop variable for the outer
### for loop. It's common to use j when you have already used i
for (j in 1:n.rep) {
n.fold = n / 10
n.fold = ceiling(n.fold)
ordered.ids = rep(1:10, times = n.fold)
ordered.ids = ordered.ids[1:n]
shuffle = sample.int(n)
shuffled.ids = ordered.ids[shuffle]
data.CV = data
data.CV$fold = shuffled.ids
CV.MSPEs = array(0, dim = c(10, 6))
colnames(CV.MSPEs) = colnames(all.split.MSPEs)
for (i in 1:10) {
data.train = filter(data.CV, fold != i)
data.valid = filter(data.CV, fold == i)
### In tutorial, I was getting an error because I wrote -folds
### instead of -fold. Whoops!
data.train = select(data.train, -fold)
data.valid = select(data.valid, -fold)
fit.sugar = lm(alcohol ~ sugar, data = data.train)
fit.density = lm(alcohol ~ density, data = data.train)
fit.pH = lm(alcohol ~ pH, data = data.train)
fit.sulphates = lm(alcohol ~ sulphates, data = data.train)
fit.all = lm(alcohol ~ ., data = data.train)
fit.int = lm(alcohol ~ . ^ 2, data = data.train)
pred.sugar = predict(fit.sugar, data.valid)
pred.density = predict(fit.density, data.valid)
pred.pH = predict(fit.pH, data.valid)
pred.sulphates = predict(fit.sulphates, data.valid)
pred.all = predict(fit.all, data.valid)
pred.int = predict(fit.int, data.valid)
Y.valid = data.valid$alcohol
MSPE.sugar = get.MSPE(Y.valid, pred.sugar)
MSPE.density = get.MSPE(Y.valid, pred.density)
MSPE.pH = get.MSPE(Y.valid, pred.pH)
MSPE.sulphates = get.MSPE(Y.valid, pred.sulphates)
MSPE.all = get.MSPE(Y.valid, pred.all)
MSPE.int = get.MSPE(Y.valid, pred.int)
CV.MSPEs[i, 1] = MSPE.sugar
CV.MSPEs[i, 2] = MSPE.density
CV.MSPEs[i, 3] = MSPE.pH
CV.MSPEs[i, 4] = MSPE.sulphates
CV.MSPEs[i, 5] = MSPE.all
CV.MSPEs[i, 6] = MSPE.int
}
### We now have MSPEs for each fold of one iteration of CV. Let's
### get the average error across these folds (think of each fold
### as a data split), and store the result in ave.CV.MSPEs
this.ave.MSPEs = apply(CV.MSPEs, 2, mean)
ave.CV.MSPEs[j,] = this.ave.MSPEs # We are replacing a whole
# row at once
}
boxplot(ave.CV.MSPEs,
main = "Boxplot of 20 Replicates of Average 10-Fold CV Error")
rel.ave.CV.MSPEs = apply(ave.CV.MSPEs, 1, function(W){
best = min(W)
return(W / best)
})
rel.ave.CV.MSPEs = t(rel.ave.CV.MSPEs)
boxplot(rel.ave.CV.MSPEs,
main = "Boxplot of 20 Replicates of Relative Average 10-Fold CV Error")
### Lastly, let's put the boostrap error estimation procedure inside
### a for loop.
ave.boot.MSPEs = array(0, dim = c(n.rep, 6))
colnames(ave.boot.MSPEs) = colnames(boot.MSPEs)
### We will put the entire bootstrap section from above inside another
### for loop. This will repeat the entire bootstrap process
### Note: we need to use a different loop variable for the outer
### for loop. It's common to use j when you have already used i
for (j in 1:n.rep) {
boot.MSPEs = array(0, dim = c(10, 6))
colnames(boot.MSPEs) = colnames(CV.MSPEs)
for(i in 1:10){
ids.train = sample.int(n, replace = T)
ids.valid = setdiff(1:n, ids.train)
data.train = data[ids.train,]
data.valid = data[ids.valid,]
fit.sugar = lm(alcohol ~ sugar, data = data.train)
fit.density = lm(alcohol ~ density, data = data.train)
fit.pH = lm(alcohol ~ pH, data = data.train)
fit.sulphates = lm(alcohol ~ sulphates, data = data.train)
fit.all = lm(alcohol ~ ., data = data.train)
fit.int = lm(alcohol ~ . ^ 2, data = data.train)
pred.sugar = predict(fit.sugar, data.valid)
pred.density = predict(fit.density, data.valid)
pred.pH = predict(fit.pH, data.valid)
pred.sulphates = predict(fit.sulphates, data.valid)
pred.all = predict(fit.all, data.valid)
pred.int = predict(fit.int, data.valid)
Y.valid = data.valid$alcohol
MSPE.sugar = get.MSPE(Y.valid, pred.sugar)
MSPE.density = get.MSPE(Y.valid, pred.density)
MSPE.pH = get.MSPE(Y.valid, pred.pH)
MSPE.sulphates = get.MSPE(Y.valid, pred.sulphates)
MSPE.all = get.MSPE(Y.valid, pred.all)
MSPE.int = get.MSPE(Y.valid, pred.int)
boot.MSPEs[i, 1] = MSPE.sugar
boot.MSPEs[i, 2] = MSPE.density
boot.MSPEs[i, 3] = MSPE.pH
boot.MSPEs[i, 4] = MSPE.sulphates
boot.MSPEs[i, 5] = MSPE.all
boot.MSPEs[i, 6] = MSPE.int
}
### We now have MSPEs for each resample of one iteration of the
### boostrap. Let's get the average error across these resamples
### (think of each sample as a data split), and store the result
### in ave.boot.MSPEs
this.ave.MSPEs = apply(boot.MSPEs, 2, mean)
ave.boot.MSPEs[j,] = this.ave.MSPEs # We are replacing a whole
# row at once
}
boxplot(ave.boot.MSPEs,
main = "Boxplot of 20 Replicates of Average Bootstrap Error")
rel.ave.CV.MSPEs = apply(ave.CV.MSPEs, 1, function(W){
best = min(W)
return(W / best)
})
rel.ave.CV.MSPEs = t(rel.ave.CV.MSPEs)
boxplot(rel.ave.CV.MSPEs,
main = "Boxplot of 20 Replicates of Relative Average Bootstrap Error")
