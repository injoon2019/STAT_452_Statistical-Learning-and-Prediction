fit.cubic.df.7 = lm(Ozone ~ poly(Temp, degree = 7), data = data)
fit.cubic.df.9 = lm(Ozone ~ poly(Temp, degree = 9), data = data)
fit.cubic.df.20 = lm(Ozone ~ poly(Temp, degree = 20), data = data)
#Predict on sorted data
temp.sort = data.frame(temp = sort(data$Temp))
pred.cubic.df.5 = predict(fit.cubic.df.5, temp.sort)
pred.cubic.df.7 = predict(fit.cubic.df.7, temp.sort)
pred.cubic.df.9 = predict(fit.cubic.df.9, temp.sort)
pred.cubic.df.20 = predict(fit.cubic.df.20, temp.sort)
#Predict on sorted data
temp.sort = data.frame(temp = sort(data$Temp))
pred.cubic.df.7 = predict(fit.cubic.df.7, temp.sort)
data
fit.cubic.df.5 = lm(Ozone ~ poly(Temp, degree = 5), data = data)
fit.cubic.df.7 = lm(Ozone ~ poly(Temp, degree = 7), data = data)
fit.cubic.df.9 = lm(Ozone ~ poly(Temp, degree = 9), data = data)
fit.cubic.df.20 = lm(Ozone ~ poly(Temp, degree = 20), data = data)
#Predict on sorted data
temp.sort = data.frame(temp = sort(data$Temp))
pred.cubic.df.5 = predict(fit.cubic.df.5, temp.sort)
temp.sort
density.sort
library(dplyr)
library(MASS)   # For ridge regression
library(glmnet) # For LASSO
source("Helper Functions.R")
data = na.omit(airquality[, 1:4])
data$TWcp = data$Temp*data$Wind
data$TWrat = data$Temp/data$Wind
# the different functions
fit.cubic.df.5 = lm(Ozone ~ poly(Temp, degree = 5), data = data)
fit.cubic.df.7 = lm(Ozone ~ poly(Temp, degree = 7), data = data)
fit.cubic.df.9 = lm(Ozone ~ poly(Temp, degree = 9), data = data)
fit.cubic.df.20 = lm(Ozone ~ poly(Temp, degree = 20), data = data)
fit.cubic.df.5
covid <-  read.csv ("Covid BC 2020-09-22.csv", header=TRUE)
setwd("C:/Users/injoo/OneDrive/Desktop/SFU/STAT 452/Lecture Note/Week 6")
covid <-  read.csv ("Covid BC 2020-09-22.csv", header=TRUE)
covid$date = as.Date(covid$Date, "%Y-%m-%d")
head(covid)
summary(covid)
# Plot of data
x11(h=7, w=10)
head(covid)
plot(x=covid$date, y=covid$Cases, type="l", main="Plot of Daily BC Covid-19 Cases over time")
##################################################################
# Plot with added polynomials
x11(h=7, w=10)
plot(x=covid$date, y=covid$Cases, type="l", col="gray",
main="Plot of Daily BC Covid-19 Cases over time")
# Adding legend to the plot.  Note that "as.numeric(covid$date)"
#   shows that dates are represented numerically by numbers
#   ranging from 18287 to 18527, so putting legend corner at 18300
legend(x=18300, y=170,
legend=c("3rd order poly", "6th order poly", "9th order poly", '12th order poly'), lty="solid",
col=colors()[c(24,121,145,84)], lwd=2)
# Add cubic polynomial to plot (3 df model)
poly3 <- lm(data=covid, Cases ~ poly(x=date, degree=3))
summary(poly3)
lines(x=covid$date, y=predict(poly3, newdata=covid), col=colors()[24], lwd=2)
# Add 6th order polynomial to plot (3 df model)
poly6 <- lm(data=covid, Cases ~ poly(x=date, degree=6))
#summary(poly6)
lines(x=covid$date, y=predict(poly6, newdata=covid), col=colors()[121], lwd=2)
# Add 9th polynomial to plot (9 df model)
poly9 <- lm(data=covid, Cases ~ poly(x=date, degree=9))
#summary(poly9)
lines(x=covid$date, y=predict(poly9, newdata=covid), col=colors()[145], lwd=2)
# Add 12th polynomial to plot (9 df model)
poly12 <- lm(data=covid, Cases ~ poly(x=date, degree=12))
#summary(poly12)
lines(x=covid$date, y=predict(poly12, newdata=covid), col=colors()[84], lwd=2)
###################################################################
# Now use splines.  Will try three different cubic splines:
#   6df (3 knots), 9df (6 knots), 12df (9 knots)
# First preparing a new plot
x11(h=7, w=10)
plot(x=covid$date, y=covid$Cases, type="l", col="gray",
main="Plot of Daily BC Covid-19 Cases over time")
legend(x=18300, y=170, legend=c("Cubic poly", "Cubic Spline 6 df",
"Cubic Spline 9 df", "Cubic Spline, 12 df"),
lty="solid", col=colors()[c(24,121,145,84)], lwd=2)
lines(x=covid$date, y=predict(poly3, newdata=covid), col=colors()[24], lwd=2)
# Now start fitting splines.
library(splines)
# Cubic regression spline using bs() to create the basis functions
# 6 DF spline
head(bs(covid$date,df=6))
cub.spl.6 <- lm(data=covid, Cases ~ bs(date,df=6))
summary(cub.spl.6) #Doesn't mean much
lines(x=covid$date, y=predict(cub.spl.6, newdata=covid), col=colors()[121], lwd=2)
#1. Use cubic splines to model the relationship between Ozone and Temp:
# (a) On one graph, plot the data along with fits of
# i. Cubic regression
# ii. Cubic splines with 5, 7, 9, and 20 DF.
# Present the plot. Be sure to add a legend and use different colours for
# the different functions
poly3 <- lm(data=data, Ozone ~ poly(x=Temp, degree=3))
x11(h=7, w=10)
plot(x=data$Temp, y=cata$Ozone, type="l", col="gray",
main="Plot Ozone vs Temp")
plot(x=data$Temp, y=data$Ozone, type="l", col="gray",
main="Plot Ozone vs Temp")
temp.sort = data.frame(temp = sort(data$Temp))
with(data, plot(Temp, Ozone))
library(splines)
# Cubic regression spline using bs() to create the basis functions
# 6 DF spline
head(bs(covid$date,df=6))
cub.spl.6 <- lm(data=covid, Cases ~ bs(date,df=6))
#1. Use cubic splines to model the relationship between Ozone and Temp:
# (a) On one graph, plot the data along with fits of
# i. Cubic regression
# ii. Cubic splines with 5, 7, 9, and 20 DF.
# Present the plot. Be sure to add a legend and use different colours for
# the different functions
poly3 <- lm(data=data, Ozone ~ poly(x=Temp, degree=3))
with(data, plot(Temp, Ozone))
lines(x=data$Temp, y=predict(cub.spl.5, newdata=data$Ozone), col=colors()[121], lwd=2)
# 6 DF spline
cub.spl.5 <- lm(data=data, Ozone ~ bs(Temp,df=5))
lines(x=data$Temp, y=predict(cub.spl.5, newdata=data$Ozone), col=colors()[121], lwd=2)
#1. Use cubic splines to model the relationship between Ozone and Temp:
# (a) On one graph, plot the data along with fits of
# i. Cubic regression
# ii. Cubic splines with 5, 7, 9, and 20 DF.
# Present the plot. Be sure to add a legend and use different colours for
# the different functions
poly3 <- lm(data=data, Ozone ~ poly(x=Temp, degree=3))
with(data, plot(Temp, Ozone))
# 6 DF spline
cub.spl.5 <- lm(data=data, Ozone ~ bs(Temp,df=5))
lines(x=data$Temp, y=predict(cub.spl.5, newdata=data$Ozone), col=colors()[121], lwd=2)
cub.spl.5
lines(x=data$Temp, y=predict(cub.spl.5, newdata=Ozone), col=colors()[121], lwd=2)
lines(x=data$Temp, y=predict(cub.spl.5, newdata=data), col=colors()[121], lwd=2)
lines(x=temp.sort, y=predict(cub.spl.5, newdata=data), col=colors()[121], lwd=2)
with(data, plot(Temp, Ozone))
lines(x=temp.sort, y=predict(cub.spl.5, newdata=data), col=colors()[121], lwd=2)
temp.sort = data.frame(Teno = sort(data$Temp))
# 6 DF spline
cub.spl.5 <- lm(data=data, Ozone ~ bs(Temp,df=5))
lines(x=temp.sort, y=predict(cub.spl.5, newdata=data), col=colors()[121], lwd=2)
dim(temp.sort)
dim(data)
head(covid)
covid <-  read.csv ("Covid BC 2020-09-22.csv", header=TRUE)
head(covid)
library(dplyr)
library(MASS)   # For ridge regression
library(glmnet) # For LASSO
library(splines)
source("Helper Functions.R")
data = na.omit(airquality[, 1:4])
data$TWcp = data$Temp*data$Wind
data$TWrat = data$Temp/data$Wind
data
data = data[-c(2, 3, 4, 5)]
data
data = na.omit(airquality[, 1:4])
data$TWcp = data$Temp*data$Wind
data$TWrat = data$Temp/data$Wind
data
data = data[-c(2, 3, 5, 6)]
#1. Use cubic splines to model the relationship between Ozone and Temp:
# (a) On one graph, plot the data along with fits of
# i. Cubic regression
# ii. Cubic splines with 5, 7, 9, and 20 DF.
# Present the plot. Be sure to add a legend and use different colours for
# the different functions
poly3 <- lm(data=data, Ozone ~ poly(x=Temp, degree=3))
with(data, plot(Temp, Ozone))
temp.sort = data.frame(Teno = sort(data$Temp))
# 6 DF spline
cub.spl.5 <- lm(data=data, Ozone ~ bs(Temp,df=5))
lines(x=temp.sort, y=predict(cub.spl.5, newdata=data), col=colors()[121], lwd=2)
dim(temp.sort)
dim(data)
lines(x=temp.sort, y=predict(cub.spl.5, newdata=data$Temp), col=colors()[121], lwd=2)
head(covid)
lines(x=data$Temp, y=predict(cub.spl.5, newdata=data), col=colors()[121], lwd=2)
dim(data$Temp)
dim(data)
dim(data$Temp)
data$Temp
length(data$Temp)
length(temp.sort)
temp.sort
dim(temp.sort)
typeof(temp.sort)
typeof(data$Temp)
data$Temp
length(data$Temp)
length(temp.sort)
test = t(temp.sort)
test
temp.sort
type(temp.sort)
typeof(temp.sort)
typeof(data$Temp)
test = unlist(temp.sort, use.names = False)
test = unlist(temp.sort, use.names = false)
test = unlist(temp.sort, use.names = FALSE)
test
temp.sort = unlist(temp.sort, use.names = FALSE)
with(data, plot(Temp, Ozone))
lines(x=temp.sort, y=predict(cub.spl.5, newdata=data), col=colors()[121], lwd=2)
plot(x=covid$date, y=covid$Cases, type="l", col="gray",
main="Plot of Daily BC Covid-19 Cases over time")
###################################################################
# Now use splines.  Will try three different cubic splines:
#   6df (3 knots), 9df (6 knots), 12df (9 knots)
# First preparing a new plot
x11(h=7, w=10)
plot(x=covid$date, y=covid$Cases, type="l", col="gray",
main="Plot of Daily BC Covid-19 Cases over time")
lines(x=covid$date, y=predict(poly3, newdata=covid), col=colors()[24], lwd=2)
covid <-  read.csv ("Covid BC 2020-09-22.csv", header=TRUE)
covid$date = as.Date(covid$Date, "%Y-%m-%d")
head(covid)
summary(covid)
x11(h=7, w=10)
plot(x=covid$date, y=covid$Cases, type="l", main="Plot of Daily BC Covid-19 Cases over time")
covid <-  read.csv ("Covid BC 2020-09-22.csv", header=TRUE)
covid$date = as.Date(covid$Date, "%Y-%m-%d")
head(covid)
summary(covid)
# Plot of data
x11(h=7, w=10)
plot(x=covid$date, y=covid$Cases, type="l", main="Plot of Daily BC Covid-19 Cases over time")
###################################################################
# Now use splines.  Will try three different cubic splines:
#   6df (3 knots), 9df (6 knots), 12df (9 knots)
# First preparing a new plot
x11(h=7, w=10)
plot(x=covid$date, y=covid$Cases, type="l", col="gray",
main="Plot of Daily BC Covid-19 Cases over time")
legend(x=18300, y=170, legend=c("Cubic poly", "Cubic Spline 6 df",
"Cubic Spline 9 df", "Cubic Spline, 12 df"),
lty="solid", col=colors()[c(24,121,145,84)], lwd=2)
lines(x=covid$date, y=predict(poly3, newdata=covid), col=colors()[24], lwd=2)
# Now start fitting splines.
library(splines)
# Cubic regression spline using bs() to create the basis functions
# 6 DF spline
head(bs(covid$date,df=6))
# Add cubic polynomial to plot (3 df model)
poly3 <- lm(data=covid, Cases ~ poly(x=date, degree=3))
lines(x=covid$date, y=predict(poly3, newdata=covid), col=colors()[24], lwd=2)
# Now start fitting splines.
library(splines)
# Cubic regression spline using bs() to create the basis functions
# 6 DF spline
head(bs(covid$date,df=6))
cub.spl.6 <- lm(data=covid, Cases ~ bs(date,df=6))
summary(cub.spl.6) #Doesn't mean much
lines(x=covid$date, y=predict(cub.spl.6, newdata=covid), col=colors()[121], lwd=2)
#1. Use cubic splines to model the relationship between Ozone and Temp:
# (a) On one graph, plot the data along with fits of
# i. Cubic regression
# ii. Cubic splines with 5, 7, 9, and 20 DF.
# Present the plot. Be sure to add a legend and use different colours for
# the different functions
poly3 <- lm(data=data, Ozone ~ poly(x=Temp, degree=3))
pred.cubic = predict(poly3, temp.sort)
temp.sort = data.frame(Teno = sort(data$Temp))
temp.sort = unlist(temp.sort, use.names = FALSE)
data = na.omit(airquality[, 1:4])
data$TWcp = data$Temp*data$Wind
data$TWrat = data$Temp/data$Wind
data = data[-c(2, 3, 5, 6)]
#1. Use cubic splines to model the relationship between Ozone and Temp:
# (a) On one graph, plot the data along with fits of
# i. Cubic regression
# ii. Cubic splines with 5, 7, 9, and 20 DF.
# Present the plot. Be sure to add a legend and use different colours for
# the different functions
poly3 <- lm(data=data, Ozone ~ poly(x=Temp, degree=3))
temp.sort = data.frame(Teno = sort(data$Temp))
temp.sort = unlist(temp.sort, use.names = FALSE)
pred.cubic = predict(poly3, temp.sort)
poly3
temp.sort
cub.spl.6 <- lm(data=covid, Cases ~ bs(date,df=6))
cub.spl.6
# 6 DF spline
cub.spl.5 <- lm(data=data, Ozone ~ bs(Temp,df=5))
cub.spl.5
lines(x=temp.sort, y=predict(cub.spl.5, newdata=data), col=colors()[121], lwd=2)
with(data, plot(Temp, Ozone))
lines(x=temp.sort, y=predict(cub.spl.5, newdata=data), col=colors()[121], lwd=2)
lines(x=data$Temp, y=predict(cub.spl.5, newdata=data), col=colors()[121], lwd=2)
with(data, plot(Temp, Ozone))
# 7 DF spline
cub.spl.7 <- lm(data=data, Ozone ~ bs(Temp,df=5))
lines(x=data$Temp, y=predict(cub.spl.7, newdata=data), col=colors()[121], lwd=2)
# temp.sort = data.frame(Teno = sort(data$Temp))
# temp.sort = unlist(temp.sort, use.names = FALSE)
#New data
newdata <- data[order(Temp),]
data = na.omit(airquality[, 1:4])
data$TWcp = data$Temp*data$Wind
data$TWrat = data$Temp/data$Wind
data = data[-c(2, 3, 5, 6)]
# temp.sort = data.frame(Teno = sort(data$Temp))
# temp.sort = unlist(temp.sort, use.names = FALSE)
#New data
newdata <- data[order(Temp),]
head(data)
# temp.sort = data.frame(Teno = sort(data$Temp))
# temp.sort = unlist(temp.sort, use.names = FALSE)
#New data
newdata = data[order(data$Temp),]
newdata
# 5 DF spline
cub.spl.5 <- lm(data=newdata, Ozone ~ bs(Temp,df=5))
with(data, plot(Temp, Ozone))
#New data
ordered.data = data[order(data$Temp),]
# 5 DF spline
cub.spl.5 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=5))
lines(x=ordered.data$Temp, y=predict(cub.spl.5, newdata=ordered.data), col=colors()[121], lwd=2)
# 7 DF spline
cub.spl.7 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=5))
lines(x=oredered.data$Temp, y=predict(cub.spl.7, newdata=ordered.data), col=colors()[145], lwd=2)
lines(x=ordered.data$Temp, y=predict(cub.spl.7, newdata=ordered.data), col=colors()[145], lwd=2)
with(data, plot(Temp, Ozone))
lines(x=ordered.data$Temp, y=predict(cub.spl.5, newdata=ordered.data), col=colors()[121], lwd=2)
lines(x=ordered.data$Temp, y=predict(cub.spl.7, newdata=ordered.data), col=colors()[145], lwd=2)
with(data, plot(Temp, Ozone))
lines(x=ordered.data$Temp, y=predict(cub.spl.5, newdata=ordered.data), col=colors()[121], lwd=2)
lines(x=ordered.data$Temp, y=predict(cub.spl.7, newdata=ordered.data), col=colors()[145], lwd=2)
# 7 DF spline
cub.spl.7 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=7))
lines(x=ordered.data$Temp, y=predict(cub.spl.7, newdata=ordered.data), col=colors()[145], lwd=2)
with(data, plot(Temp, Ozone))
# 5 DF spline
cub.spl.5 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=5))
lines(x=ordered.data$Temp, y=predict(cub.spl.5, newdata=ordered.data), col=colors()[121], lwd=2)
# 7 DF spline
cub.spl.7 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=7))
lines(x=ordered.data$Temp, y=predict(cub.spl.7, newdata=ordered.data), col=colors()[145], lwd=2)
# 9 DF spline
cub.spl.9 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=9))
lines(x=ordered.data$Temp, y=predict(cub.spl.9, newdata=ordered.data), col=colors()[145], lwd=2)
# 9 DF spline
cub.spl.9 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=9))
lines(x=ordered.data$Temp, y=predict(cub.spl.9, newdata=ordered.data), col=colors()[84], lwd=2)
with(data, plot(Temp, Ozone))
# 5 DF spline
cub.spl.5 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=5))
lines(x=ordered.data$Temp, y=predict(cub.spl.5, newdata=ordered.data), col=colors()[121], lwd=2)
with(data, plot(Temp, Ozone))
legend(x=18300, y=170, legend=c("Cubic Splie 5 DF", "Cubic Spline 7 df",
"Cubic Spline 9 df", "Cubic Spline, 20 df"),
lty="solid", col=colors()[c(24,121,145,84)], lwd=2)
data = na.omit(airquality[, 1:4])
data$TWcp = data$Temp*data$Wind
data$TWrat = data$Temp/data$Wind
data = data[-c(2, 3, 5, 6)]
#Ordered Data
ordered.data = data[order(data$Temp),]
with(data, plot(Temp, Ozone))
plot(x=data$Temp, y=data$Ozone, type="l", col="gray",
main="Temp vs Ozone plot")
plot(x=data$Temp, y=data$Ozone, type="o", col="gray",
main="Temp vs Ozone plot")
with(data, plot(Temp, Ozone))
plot(x=data$Temp, y=data$Ozone, type="o", col="gray",
main="Temp vs Ozone plot")
with(data, plot(Temp, Ozone))
legend(x=18300, y=170, legend=c("Cubic Splie 5 DF", "Cubic Spline 7 df",
"Cubic Spline 9 df", "Cubic Spline, 20 df"),
lty="solid", col=colors()[c(24,121,145,84)], lwd=2)
plot(x=covid$date, y=covid$Cases, type="l", col="gray",
main="Plot of Daily BC Covid-19 Cases over time")
legend(x=18300, y=170, legend=c("Cubic poly", "Cubic Spline 6 df",
"Cubic Spline 9 df", "Cubic Spline, 12 df"),
lty="solid", col=colors()[c(24,121,145,84)], lwd=2)
with(data, plot(Temp, Ozone))
plot(x=ordered.data$Temp, y=ordered.data$Ozone, type="o", col="gray",
main="Temp vs Ozone plot")
with(data, plot(Temp, Ozone))
plot(x=ordered.data$Temp, y=ordered.data$Ozone, type="o", col="gray",
main="Temp vs Ozone plot")
legend(x=18300, y=170, legend=c("Cubic Splie 5 DF", "Cubic Spline 7 df",
"Cubic Spline 9 df", "Cubic Spline, 20 df"),
lty="solid", col=colors()[c(24,121,145,84)], lwd=2)
#1. Use cubic splines to model the relationship between Ozone and Temp:
# (a) On one graph, plot the data along with fits of
# i. Cubic regression
# ii. Cubic splines with 5, 7, 9, and 20 DF.
# Present the plot. Be sure to add a legend and use different colours for
# the different functions
x11(h=7, w=10)
with(data, plot(Temp, Ozone))
legend(x=18300, y=170, legend=c("Cubic Splie 5 DF", "Cubic Spline 7 df",
"Cubic Spline 9 df", "Cubic Spline, 20 df"),
lty="solid", col=colors()[c(24,121,145,84)], lwd=2)
addLegend("topleft", legend=c("Cubic Splie 5 DF", "Cubic Spline 7 df",
"Cubic Spline 9 df", "Cubic Spline, 20 df"),
lty="solid", col=colors()[c(24,121,145,84)], lwd=2)
legend("topleft", legend=c("Cubic Splie 5 DF", "Cubic Spline 7 df",
"Cubic Spline 9 df", "Cubic Spline, 20 df"),
lty="solid", col=colors()[c(24,121,145,84)], lwd=2)
# 5 DF spline
cub.spl.5 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=5))
lines(x=ordered.data$Temp, y=predict(cub.spl.5, newdata=ordered.data), col=colors()[24], lwd=2)
# 7 DF spline
cub.spl.7 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=7))
lines(x=ordered.data$Temp, y=predict(cub.spl.7, newdata=ordered.data), col=colors()[121], lwd=2)
# 9 DF spline
cub.spl.9 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=9))
lines(x=ordered.data$Temp, y=predict(cub.spl.9, newdata=ordered.data), col=colors()[145], lwd=2)
# 20 DF spline
cub.spl.20 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=20))
lines(x=ordered.data$Temp, y=predict(cub.spl.20, newdata=ordered.data), col=colors()[84], lwd=2)
with(data, plot(Temp, Ozone))
lines(x=ordered.data$Temp, y=predict(cub.spl.5, newdata=ordered.data), col=colors()[24], lwd=2)
lines(x=ordered.data$Temp, y=predict(cub.spl.7, newdata=ordered.data), col=colors()[121], lwd=2)
lines(x=ordered.data$Temp, y=predict(cub.spl.9, newdata=ordered.data), col=colors()[145], lwd=2)
lines(x=ordered.data$Temp, y=predict(cub.spl.20, newdata=ordered.data), col=colors()[84], lwd=2)
with(data, plot(Temp, Ozone))
# 7 DF spline
cub.spl.7 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=7))
lines(x=ordered.data$Temp, y=predict(cub.spl.7, newdata=ordered.data), col=colors()[121], lwd=2)
lines(x=ordered.data$Temp, y=predict(cub.spl.9, newdata=ordered.data), col=colors()[145], lwd=2)
lines(x=ordered.data$Temp, y=predict(cub.spl.5, newdata=ordered.data), col=colors()[24], lwd=2)
lines(x=ordered.data$Temp, y=predict(cub.spl.20, newdata=ordered.data), col=colors()[84], lwd=2)
legend("topleft", legend=c("Cubic Splie 5 DF", "Cubic Spline 7 df",
"Cubic Spline 9 df", "Cubic Spline, 20 df"),
lty="solid", col=colors()[c(24,121,145,84)], lwd=2)
with(data, plot(Temp, Ozone))
legend("topleft", legend=c("Natural Spline 5 DF", "Natural Spline 7 df",
"Natural Spline 9 df"),
lty="solid", col=colors()[c(24,121,145,84)], lwd=2)
# 5 DF spline
cub.spl.5 <- lm(data=ordered.data, Ozone ~ ns(Temp,df=5))
lines(x=ordered.data$Temp, y=predict(cub.spl.5, newdata=ordered.data), col=colors()[24], lwd=2)
lines(x=ordered.data$Temp, y=predict(cub.spl.5, newdata=ordered.data), col=colors()[24], lwd=2)
# 5 DF spline
cub.spl.5 <- lm(data=ordered.data, Ozone ~ bs(Temp,df=5))
lines(x=ordered.data$Temp, y=predict(cub.spl.7, newdata=ordered.data), col=colors()[121], lwd=2)
with(data, plot(Temp, Ozone))
# 5 DF spline
nat.spl.5 <- lm(data=ordered.data, Ozone ~ ns(Temp,df=5))
lines(x=ordered.data$Temp, y=predict(nat.spl.5, newdata=ordered.data), col=colors()[24], lwd=2)
lines(x=ordered.data$Temp, y=predict(cub.spl.5, newdata=ordered.data), col=colors()[24], lwd=2)
with(data, plot(Temp, Ozone))
legend("topleft", legend=c("Natural Spline 5 DF", "Natural Spline 7 df",
"Natural Spline 9 df"),
lty="solid", col=colors()[c(24,121,145,84)], lwd=2)
# 5 DF spline
nat.spl.5 <- lm(data=ordered.data, Ozone ~ ns(Temp,df=5))
lines(x=ordered.data$Temp, y=predict(nat.spl.5, newdata=ordered.data), col=colors()[24], lwd=2)
# 7 DF spline
nat.spl.7 <- lm(data=ordered.data, Ozone ~ ns(Temp,df=7))
lines(x=ordered.data$Temp, y=predict(nat.spl.7, newdata=ordered.data), col=colors()[121], lwd=2)
# 9 DF spline
nat.spl.9 <- lm(data=ordered.data, Ozone ~ ns(Temp,df=9))
lines(x=ordered.data$Temp, y=predict(nat.spl.9, newdata=ordered.data), col=colors()[145], lwd=2)
library(dplyr)
library(MASS)   # For ridge regression
library(glmnet) # For LASSO
source("Helper Functions.R")
data = na.omit(airquality[, 1:4])
data$TWcp = data$Temp*data$Wind
data$TWrat = data$Temp/data$Wind
#1. Find and report the median value for wind speed and temperature
wind.med = median(data$Wind)
temp.med = median(data$Temp)
#2. Use this median value to create high and low regions on both variables. Show values
#for Temp, Wind, and the two high-low region factors for these variables.
wind.hilo = (data$Wind < median(data$Wind))
temp.hilo = (data$Temp < median(data$Temp))
#3. Fit a linear regression with the two region variables.
mod.2step = lm(data$Ozone ~ wind.hilo + temp.hilo)
####################################################
# 4. Add the interaction of the two region variables to the model
# (a) Report the results from summary().
mod.2step2 = lm(data$Ozone ~ wind.hilo + temp.hilo + wind.hilo * temp.hilo)
x1 <- seq(from=2.2, to=21, by=.05)
x2 = seq(from=46, to=98, by=.5)
xy1 <- data.frame(expand.grid(Wind=x1, Temp=x2))
xy1c = data.frame(wind.hilo = (xy1$Wind < median(data$Wind)),
temp.hilo = (xy1$Temp < median(data$Temp)))
pred2 <- predict(mod.2step2 ,newdata=xy1c)
surface2 = matrix(pred2, nrow=length(x1))
open3d()
persp3d(x = x1, y = x2,
z = surface2, col = "orange", xlab="Wind", ylab="Temp",
zlab="Ozone")
points3d(data$Ozone ~ wind.hilo + temp.hilo + wind.hilo * temp.hilo ,col="blue")
open3d()
open3d()
library(rgl)
open3d()
persp3d(x = x1, y = x2,
z = surface2, col = "orange", xlab="Wind", ylab="Temp",
zlab="Ozone")
points3d(data$Ozone ~ wind.hilo + temp.hilo + wind.hilo * temp.hilo ,col="blue")
points3d(data$Ozone ~ data$Wind + data$, col="blue")
points3d(data$Ozone ~ data$Wind + data$Temp, col="blue")
persp3d(x = x1, y = x2,
z = surface2, col = "orange", xlab="Wind", ylab="Temp",
zlab="Ozone")
pred2 <- predict(mod.2step2 ,newdata=xy1c)
surface2 = matrix(pred2, nrow=length(x1))
persp3d(x = x1, y = x2,
z = surface2, col = "orange", xlab="Wind", ylab="Temp",
zlab="Ozone")
points3d(data$Ozone ~ data$Wind + data$Temp, col="blue")
